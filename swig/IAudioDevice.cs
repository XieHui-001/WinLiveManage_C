//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IAudioDevice : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IAudioDevice(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IAudioDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IAudioDevice() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_IAudioDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual AudioDeviceType getDeviceType() {
    AudioDeviceType ret = (AudioDeviceType)AoceWrapperPINVOKE.IAudioDevice_getDeviceType(swigCPtr);
    return ret;
  }

  public virtual string getName() {
    string ret = AoceWrapperPINVOKE.IAudioDevice_getName(swigCPtr);
    return ret;
  }

  public virtual string getId() {
    string ret = AoceWrapperPINVOKE.IAudioDevice_getId(swigCPtr);
    return ret;
  }

  public virtual void setObserver(IAudioDeviceObserver observer) {
    AoceWrapperPINVOKE.IAudioDevice_setObserver(swigCPtr, IAudioDeviceObserver.getCPtr(observer));
  }

  public virtual void prepare(bool bAsync) {
    AoceWrapperPINVOKE.IAudioDevice_prepare(swigCPtr, bAsync);
  }

  public virtual AudioFormat getAudioFormat() {
    AudioFormat ret = new AudioFormat(AoceWrapperPINVOKE.IAudioDevice_getAudioFormat(swigCPtr), false);
    return ret;
  }

  public virtual void start() {
    AoceWrapperPINVOKE.IAudioDevice_start(swigCPtr);
  }

  public virtual void stop() {
    AoceWrapperPINVOKE.IAudioDevice_stop(swigCPtr);
  }

  public virtual void release() {
    AoceWrapperPINVOKE.IAudioDevice_release(swigCPtr);
  }

}
