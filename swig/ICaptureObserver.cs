//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ICaptureObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ICaptureObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ICaptureObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICaptureObserver() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_ICaptureObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void onEvent(CaptureEventId eventId, LogLevel level, string msg) {
    if (SwigDerivedClassHasMethod("onEvent", swigMethodTypes0)) AoceWrapperPINVOKE.ICaptureObserver_onEventSwigExplicitICaptureObserver(swigCPtr, (int)eventId, (int)level, msg); else AoceWrapperPINVOKE.ICaptureObserver_onEvent(swigCPtr, (int)eventId, (int)level, msg);
  }

  public virtual void onResize(int width, int height) {
    if (SwigDerivedClassHasMethod("onResize", swigMethodTypes1)) AoceWrapperPINVOKE.ICaptureObserver_onResizeSwigExplicitICaptureObserver(swigCPtr, width, height); else AoceWrapperPINVOKE.ICaptureObserver_onResize(swigCPtr, width, height);
  }

  public virtual void onCapture(VideoFormat videoFormat, global::System.IntPtr device, global::System.IntPtr texture) {
    if (SwigDerivedClassHasMethod("onCapture", swigMethodTypes2)) AoceWrapperPINVOKE.ICaptureObserver_onCaptureSwigExplicitICaptureObserver(swigCPtr, VideoFormat.getCPtr(videoFormat), device, texture); else AoceWrapperPINVOKE.ICaptureObserver_onCapture(swigCPtr, VideoFormat.getCPtr(videoFormat), device, texture);
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public ICaptureObserver() : this(AoceWrapperPINVOKE.new_ICaptureObserver(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onEvent", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateICaptureObserver_0(SwigDirectorMethodonEvent);
    if (SwigDerivedClassHasMethod("onResize", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateICaptureObserver_1(SwigDirectorMethodonResize);
    if (SwigDerivedClassHasMethod("onCapture", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateICaptureObserver_2(SwigDirectorMethodonCapture);
    AoceWrapperPINVOKE.ICaptureObserver_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ICaptureObserver));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodonEvent(int eventId, int level, string msg) {
    onEvent((CaptureEventId)eventId, (LogLevel)level, msg);
  }

  private void SwigDirectorMethodonResize(int width, int height) {
    onResize(width, height);
  }

  private void SwigDirectorMethodonCapture(global::System.IntPtr videoFormat, global::System.IntPtr device, global::System.IntPtr texture) {
    onCapture(new VideoFormat(videoFormat, false), device, texture);
  }

  public delegate void SwigDelegateICaptureObserver_0(int eventId, int level, string msg);
  public delegate void SwigDelegateICaptureObserver_1(int width, int height);
  public delegate void SwigDelegateICaptureObserver_2(global::System.IntPtr videoFormat, global::System.IntPtr device, global::System.IntPtr texture);

  private SwigDelegateICaptureObserver_0 swigDelegate0;
  private SwigDelegateICaptureObserver_1 swigDelegate1;
  private SwigDelegateICaptureObserver_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(CaptureEventId), typeof(LogLevel), typeof(string) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(VideoFormat), typeof(global::System.IntPtr), typeof(global::System.IntPtr) };
}
