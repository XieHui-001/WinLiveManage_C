//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IPipeGraph : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IPipeGraph(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IPipeGraph obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPipeGraph() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_IPipeGraph(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual GpuType getGpuType() {
    GpuType ret = (GpuType)AoceWrapperPINVOKE.IPipeGraph_getGpuType(swigCPtr);
    return ret;
  }

  public virtual void reset() {
    AoceWrapperPINVOKE.IPipeGraph_reset(swigCPtr);
  }

  public virtual IBaseLayer getNode(int index) {
    global::System.IntPtr cPtr = AoceWrapperPINVOKE.IPipeGraph_getNode(swigCPtr, index);
    IBaseLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IBaseLayer(cPtr, false);
    return ret;
  }

  public virtual IBaseLayer addNode(IBaseLayer layer) {
    global::System.IntPtr cPtr = AoceWrapperPINVOKE.IPipeGraph_addNode__SWIG_0(swigCPtr, IBaseLayer.getCPtr(layer));
    IBaseLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IBaseLayer(cPtr, false);
    return ret;
  }

  public virtual IBaseLayer addNode(ILayer layer) {
    global::System.IntPtr cPtr = AoceWrapperPINVOKE.IPipeGraph_addNode__SWIG_1(swigCPtr, ILayer.getCPtr(layer));
    IBaseLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new IBaseLayer(cPtr, false);
    return ret;
  }

  public virtual bool addLine(int from, int to, int formOut, int toIn) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_0(swigCPtr, from, to, formOut, toIn);
    return ret;
  }

  public virtual bool addLine(int from, int to, int formOut) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_1(swigCPtr, from, to, formOut);
    return ret;
  }

  public virtual bool addLine(int from, int to) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_2(swigCPtr, from, to);
    return ret;
  }

  public virtual bool addLine(IBaseLayer from, IBaseLayer to, int formOut, int toIn) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_3(swigCPtr, IBaseLayer.getCPtr(from), IBaseLayer.getCPtr(to), formOut, toIn);
    return ret;
  }

  public virtual bool addLine(IBaseLayer from, IBaseLayer to, int formOut) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_4(swigCPtr, IBaseLayer.getCPtr(from), IBaseLayer.getCPtr(to), formOut);
    return ret;
  }

  public virtual bool addLine(IBaseLayer from, IBaseLayer to) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_addLine__SWIG_5(swigCPtr, IBaseLayer.getCPtr(from), IBaseLayer.getCPtr(to));
    return ret;
  }

  public virtual bool getLayerOutFormat(int nodeIndex, int outputIndex, ImageFormat format, bool bOutput) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_getLayerOutFormat__SWIG_0(swigCPtr, nodeIndex, outputIndex, ImageFormat.getCPtr(format), bOutput);
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getLayerOutFormat(int nodeIndex, int outputIndex, ImageFormat format) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_getLayerOutFormat__SWIG_1(swigCPtr, nodeIndex, outputIndex, ImageFormat.getCPtr(format));
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getLayerInFormat(int nodeIndex, int inputIndex, ImageFormat format) {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_getLayerInFormat(swigCPtr, nodeIndex, inputIndex, ImageFormat.getCPtr(format));
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void clearLines() {
    AoceWrapperPINVOKE.IPipeGraph_clearLines(swigCPtr);
  }

  public virtual void clear() {
    AoceWrapperPINVOKE.IPipeGraph_clear(swigCPtr);
  }

  public virtual bool run() {
    bool ret = AoceWrapperPINVOKE.IPipeGraph_run(swigCPtr);
    return ret;
  }

}
