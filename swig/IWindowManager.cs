//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IWindowManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IWindowManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IWindowManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IWindowManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_IWindowManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int getWindowCount(bool bUpdate) {
    int ret = AoceWrapperPINVOKE.IWindowManager_getWindowCount__SWIG_0(swigCPtr, bUpdate);
    return ret;
  }

  public virtual int getWindowCount() {
    int ret = AoceWrapperPINVOKE.IWindowManager_getWindowCount__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual IWindow getWindow(int index) {
    global::System.IntPtr cPtr = AoceWrapperPINVOKE.IWindowManager_getWindow(swigCPtr, index);
    IWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IWindow(cPtr, false);
    return ret;
  }

  public virtual IWindow getDesktop() {
    global::System.IntPtr cPtr = AoceWrapperPINVOKE.IWindowManager_getDesktop(swigCPtr);
    IWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IWindow(cPtr, false);
    return ret;
  }

  public virtual void setForeground(IWindow window) {
    AoceWrapperPINVOKE.IWindowManager_setForeground(swigCPtr, IWindow.getCPtr(window));
  }

}
