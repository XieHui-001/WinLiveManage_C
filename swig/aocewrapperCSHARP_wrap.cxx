/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_AoceWrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_AoceWrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_AoceWrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#if __ANDROID__
#include <jni.h> 
#endif

#include "aoce/Aoce.h"
#include "aoce/AoceDefine.h"  
#include "aoce/AoceCore.h"
#include "aoce_vulkan_extra/AoceVkExtra.h"
#include "aoce_vulkan_extra/VkExtraExport.h"



#include <stdint.h>		// Use the C99 official header


typedef int IntArray;

SWIGINTERN IntArray *new_IntArray(int nelements){
  return new int[nelements]();
}
SWIGINTERN void delete_IntArray(IntArray *self){
  delete [] self;
}
SWIGINTERN int IntArray_getitem(IntArray *self,int index){
  return self[index];
}
SWIGINTERN void IntArray_setitem(IntArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *IntArray_cast(IntArray *self){
  return self;
}
SWIGINTERN IntArray *IntArray_frompointer(int *t){
  return (IntArray *) t;
}

typedef uint8_t UInt8Array;

SWIGINTERN UInt8Array *new_UInt8Array(int nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN void delete_UInt8Array(UInt8Array *self){
  delete [] self;
}
SWIGINTERN uint8_t UInt8Array_getitem(UInt8Array *self,int index){
  return self[index];
}
SWIGINTERN void UInt8Array_setitem(UInt8Array *self,int index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *UInt8Array_cast(UInt8Array *self){
  return self;
}
SWIGINTERN UInt8Array *UInt8Array_frompointer(uint8_t *t){
  return (UInt8Array *) t;
}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "aocewrapperCSHARP_wrap.h"

SwigDirector_ILiveObserver::SwigDirector_ILiveObserver() : aoce::ILiveObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ILiveObserver::~SwigDirector_ILiveObserver() {
  
}


void SwigDirector_ILiveObserver::onEvent(int32_t operater, int32_t code, aoce::LogLevel level, char const *msg) {
  int joperater  ;
  int jcode  ;
  int jlevel  ;
  char * jmsg = 0 ;
  
  if (!swig_callbackonEvent) {
    aoce::ILiveObserver::onEvent(operater,code,level,msg);
    return;
  } else {
    joperater = operater;
    jcode = code;
    jlevel = (int)level;
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackonEvent(joperater, jcode, jlevel, jmsg);
  }
}

void SwigDirector_ILiveObserver::onInitRoom() {
  if (!swig_callbackonInitRoom) {
    aoce::ILiveObserver::onInitRoom();
    return;
  } else {
    swig_callbackonInitRoom();
  }
}

void SwigDirector_ILiveObserver::onLoginRoom(bool bReConnect) {
  unsigned int jbReConnect  ;
  
  if (!swig_callbackonLoginRoom__SWIG_0) {
    aoce::ILiveObserver::onLoginRoom(bReConnect);
    return;
  } else {
    jbReConnect = bReConnect;
    swig_callbackonLoginRoom__SWIG_0(jbReConnect);
  }
}

void SwigDirector_ILiveObserver::onUserChange(int32_t userId, bool bAdd) {
  int juserId  ;
  unsigned int jbAdd  ;
  
  if (!swig_callbackonUserChange) {
    aoce::ILiveObserver::onUserChange(userId,bAdd);
    return;
  } else {
    juserId = userId;
    jbAdd = bAdd;
    swig_callbackonUserChange(juserId, jbAdd);
  }
}

void SwigDirector_ILiveObserver::onStreamUpdate(int32_t index, bool bAdd, int32_t code) {
  int jindex  ;
  unsigned int jbAdd  ;
  int jcode  ;
  
  if (!swig_callbackonStreamUpdate__SWIG_0) {
    aoce::ILiveObserver::onStreamUpdate(index,bAdd,code);
    return;
  } else {
    jindex = index;
    jbAdd = bAdd;
    jcode = code;
    swig_callbackonStreamUpdate__SWIG_0(jindex, jbAdd, jcode);
  }
}

void SwigDirector_ILiveObserver::onStreamUpdate(int32_t userId, int32_t index, bool bAdd, int32_t code) {
  int juserId  ;
  int jindex  ;
  unsigned int jbAdd  ;
  int jcode  ;
  
  if (!swig_callbackonStreamUpdate__SWIG_1) {
    aoce::ILiveObserver::onStreamUpdate(userId,index,bAdd,code);
    return;
  } else {
    juserId = userId;
    jindex = index;
    jbAdd = bAdd;
    jcode = code;
    swig_callbackonStreamUpdate__SWIG_1(juserId, jindex, jbAdd, jcode);
  }
}

void SwigDirector_ILiveObserver::onVideoFrame(int32_t userId, int32_t index, aoce::VideoFrame const &videoFrame) {
  int juserId  ;
  int jindex  ;
  void * jvideoFrame = 0 ;
  
  if (!swig_callbackonVideoFrame) {
    aoce::ILiveObserver::onVideoFrame(userId,index,videoFrame);
    return;
  } else {
    juserId = userId;
    jindex = index;
    jvideoFrame = (aoce::VideoFrame *) &videoFrame; 
    swig_callbackonVideoFrame(juserId, jindex, jvideoFrame);
  }
}

void SwigDirector_ILiveObserver::onAudioFrame(int32_t userId, int32_t index, aoce::AudioFrame const &audioFrame) {
  int juserId  ;
  int jindex  ;
  void * jaudioFrame = 0 ;
  
  if (!swig_callbackonAudioFrame) {
    aoce::ILiveObserver::onAudioFrame(userId,index,audioFrame);
    return;
  } else {
    juserId = userId;
    jindex = index;
    jaudioFrame = (aoce::AudioFrame *) &audioFrame; 
    swig_callbackonAudioFrame(juserId, jindex, jaudioFrame);
  }
}

void SwigDirector_ILiveObserver::onPlayVolume(int32_t userId, int32_t index, float volume) {
  int juserId  ;
  int jindex  ;
  float jvolume  ;
  
  if (!swig_callbackonPlayVolume) {
    aoce::ILiveObserver::onPlayVolume(userId,index,volume);
    return;
  } else {
    juserId = userId;
    jindex = index;
    jvolume = volume;
    swig_callbackonPlayVolume(juserId, jindex, jvolume);
  }
}

void SwigDirector_ILiveObserver::onPushQuality(int32_t index, int32_t quality, float fps, float kbs) {
  int jindex  ;
  int jquality  ;
  float jfps  ;
  float jkbs  ;
  
  if (!swig_callbackonPushQuality) {
    aoce::ILiveObserver::onPushQuality(index,quality,fps,kbs);
    return;
  } else {
    jindex = index;
    jquality = quality;
    jfps = fps;
    jkbs = kbs;
    swig_callbackonPushQuality(jindex, jquality, jfps, jkbs);
  }
}

void SwigDirector_ILiveObserver::onPullQuality(int32_t userId, int32_t index, int32_t quality, float fps, float kbs) {
  int juserId  ;
  int jindex  ;
  int jquality  ;
  float jfps  ;
  float jkbs  ;
  
  if (!swig_callbackonPullQuality) {
    aoce::ILiveObserver::onPullQuality(userId,index,quality,fps,kbs);
    return;
  } else {
    juserId = userId;
    jindex = index;
    jquality = quality;
    jfps = fps;
    jkbs = kbs;
    swig_callbackonPullQuality(juserId, jindex, jquality, jfps, jkbs);
  }
}

void SwigDirector_ILiveObserver::onLogoutRoom() {
  if (!swig_callbackonLogoutRoom) {
    aoce::ILiveObserver::onLogoutRoom();
    return;
  } else {
    swig_callbackonLogoutRoom();
  }
}

void SwigDirector_ILiveObserver::swig_connect_director(SWIG_Callback0_t callbackonEvent, SWIG_Callback1_t callbackonInitRoom, SWIG_Callback2_t callbackonLoginRoom__SWIG_0, SWIG_Callback3_t callbackonLoginRoom__SWIG_1, SWIG_Callback4_t callbackonUserChange, SWIG_Callback5_t callbackonStreamUpdate__SWIG_0, SWIG_Callback6_t callbackonStreamUpdate__SWIG_1, SWIG_Callback7_t callbackonVideoFrame, SWIG_Callback8_t callbackonAudioFrame, SWIG_Callback9_t callbackonPlayVolume, SWIG_Callback10_t callbackonPushQuality, SWIG_Callback11_t callbackonPullQuality, SWIG_Callback12_t callbackonLogoutRoom) {
  swig_callbackonEvent = callbackonEvent;
  swig_callbackonInitRoom = callbackonInitRoom;
  swig_callbackonLoginRoom__SWIG_0 = callbackonLoginRoom__SWIG_0;
  swig_callbackonLoginRoom__SWIG_1 = callbackonLoginRoom__SWIG_1;
  swig_callbackonUserChange = callbackonUserChange;
  swig_callbackonStreamUpdate__SWIG_0 = callbackonStreamUpdate__SWIG_0;
  swig_callbackonStreamUpdate__SWIG_1 = callbackonStreamUpdate__SWIG_1;
  swig_callbackonVideoFrame = callbackonVideoFrame;
  swig_callbackonAudioFrame = callbackonAudioFrame;
  swig_callbackonPlayVolume = callbackonPlayVolume;
  swig_callbackonPushQuality = callbackonPushQuality;
  swig_callbackonPullQuality = callbackonPullQuality;
  swig_callbackonLogoutRoom = callbackonLogoutRoom;
}

void SwigDirector_ILiveObserver::swig_init_callbacks() {
  swig_callbackonEvent = 0;
  swig_callbackonInitRoom = 0;
  swig_callbackonLoginRoom__SWIG_0 = 0;
  swig_callbackonLoginRoom__SWIG_1 = 0;
  swig_callbackonUserChange = 0;
  swig_callbackonStreamUpdate__SWIG_0 = 0;
  swig_callbackonStreamUpdate__SWIG_1 = 0;
  swig_callbackonVideoFrame = 0;
  swig_callbackonAudioFrame = 0;
  swig_callbackonPlayVolume = 0;
  swig_callbackonPushQuality = 0;
  swig_callbackonPullQuality = 0;
  swig_callbackonLogoutRoom = 0;
}

SwigDirector_IMediaPlayerObserver::SwigDirector_IMediaPlayerObserver() : aoce::IMediaPlayerObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IMediaPlayerObserver::~SwigDirector_IMediaPlayerObserver() {
  
}


void SwigDirector_IMediaPlayerObserver::onPrepared() {
  if (!swig_callbackonPrepared) {
    aoce::IMediaPlayerObserver::onPrepared();
    return;
  } else {
    swig_callbackonPrepared();
  }
}

void SwigDirector_IMediaPlayerObserver::onError(aoce::PlayStatus staus, int32_t code, char const *msg) {
  int jstaus  ;
  int jcode  ;
  char * jmsg = 0 ;
  
  if (!swig_callbackonError) {
    aoce::IMediaPlayerObserver::onError(staus,code,msg);
    return;
  } else {
    jstaus = (int)staus;
    jcode = code;
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackonError(jstaus, jcode, jmsg);
  }
}

void SwigDirector_IMediaPlayerObserver::onVideoFrame(aoce::VideoFrame const &frame) {
  void * jframe = 0 ;
  
  if (!swig_callbackonVideoFrame) {
    aoce::IMediaPlayerObserver::onVideoFrame(frame);
    return;
  } else {
    jframe = (aoce::VideoFrame *) &frame; 
    swig_callbackonVideoFrame(jframe);
  }
}

void SwigDirector_IMediaPlayerObserver::onAudioFrame(aoce::AudioFrame const &frame) {
  void * jframe = 0 ;
  
  if (!swig_callbackonAudioFrame) {
    aoce::IMediaPlayerObserver::onAudioFrame(frame);
    return;
  } else {
    jframe = (aoce::AudioFrame *) &frame; 
    swig_callbackonAudioFrame(jframe);
  }
}

void SwigDirector_IMediaPlayerObserver::onStop() {
  if (!swig_callbackonStop) {
    aoce::IMediaPlayerObserver::onStop();
    return;
  } else {
    swig_callbackonStop();
  }
}

void SwigDirector_IMediaPlayerObserver::onComplate() {
  if (!swig_callbackonComplate) {
    aoce::IMediaPlayerObserver::onComplate();
    return;
  } else {
    swig_callbackonComplate();
  }
}

void SwigDirector_IMediaPlayerObserver::swig_connect_director(SWIG_Callback0_t callbackonPrepared, SWIG_Callback1_t callbackonError, SWIG_Callback2_t callbackonVideoFrame, SWIG_Callback3_t callbackonAudioFrame, SWIG_Callback4_t callbackonStop, SWIG_Callback5_t callbackonComplate) {
  swig_callbackonPrepared = callbackonPrepared;
  swig_callbackonError = callbackonError;
  swig_callbackonVideoFrame = callbackonVideoFrame;
  swig_callbackonAudioFrame = callbackonAudioFrame;
  swig_callbackonStop = callbackonStop;
  swig_callbackonComplate = callbackonComplate;
}

void SwigDirector_IMediaPlayerObserver::swig_init_callbacks() {
  swig_callbackonPrepared = 0;
  swig_callbackonError = 0;
  swig_callbackonVideoFrame = 0;
  swig_callbackonAudioFrame = 0;
  swig_callbackonStop = 0;
  swig_callbackonComplate = 0;
}

SwigDirector_IVideoDeviceObserver::SwigDirector_IVideoDeviceObserver() : aoce::IVideoDeviceObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IVideoDeviceObserver::~SwigDirector_IVideoDeviceObserver() {
  
}


void SwigDirector_IVideoDeviceObserver::onDeviceHandle(aoce::VideoHandleId id, int32_t codeId) {
  int jid  ;
  int jcodeId  ;
  
  if (!swig_callbackonDeviceHandle) {
    aoce::IVideoDeviceObserver::onDeviceHandle(id,codeId);
    return;
  } else {
    jid = (int)id;
    jcodeId = codeId;
    swig_callbackonDeviceHandle(jid, jcodeId);
  }
}

void SwigDirector_IVideoDeviceObserver::onVideoFrame(aoce::VideoFrame frame) {
  void * jframe  ;
  
  if (!swig_callbackonVideoFrame) {
    aoce::IVideoDeviceObserver::onVideoFrame(frame);
    return;
  } else {
    jframe = (void *)new aoce::VideoFrame((const aoce::VideoFrame &)frame); 
    swig_callbackonVideoFrame(jframe);
  }
}

void SwigDirector_IVideoDeviceObserver::onDepthVideoFrame(aoce::VideoFrame colorFrame, aoce::VideoFrame depthFrame, void *alignParamt) {
  void * jcolorFrame  ;
  void * jdepthFrame  ;
  void * jalignParamt = 0 ;
  
  if (!swig_callbackonDepthVideoFrame) {
    aoce::IVideoDeviceObserver::onDepthVideoFrame(colorFrame,depthFrame,alignParamt);
    return;
  } else {
    jcolorFrame = (void *)new aoce::VideoFrame((const aoce::VideoFrame &)colorFrame); 
    jdepthFrame = (void *)new aoce::VideoFrame((const aoce::VideoFrame &)depthFrame); 
    jalignParamt = (void *) alignParamt; 
    swig_callbackonDepthVideoFrame(jcolorFrame, jdepthFrame, jalignParamt);
  }
}

void SwigDirector_IVideoDeviceObserver::swig_connect_director(SWIG_Callback0_t callbackonDeviceHandle, SWIG_Callback1_t callbackonVideoFrame, SWIG_Callback2_t callbackonDepthVideoFrame) {
  swig_callbackonDeviceHandle = callbackonDeviceHandle;
  swig_callbackonVideoFrame = callbackonVideoFrame;
  swig_callbackonDepthVideoFrame = callbackonDepthVideoFrame;
}

void SwigDirector_IVideoDeviceObserver::swig_init_callbacks() {
  swig_callbackonDeviceHandle = 0;
  swig_callbackonVideoFrame = 0;
  swig_callbackonDepthVideoFrame = 0;
}

SwigDirector_IOutputLayerObserver::SwigDirector_IOutputLayerObserver() : aoce::IOutputLayerObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IOutputLayerObserver::~SwigDirector_IOutputLayerObserver() {
  
}


void SwigDirector_IOutputLayerObserver::onImageProcess(uint8_t *data, aoce::ImageFormat const &imageFormat, int32_t outIndex) {
  void * jdata = 0 ;
  void * jimageFormat = 0 ;
  int joutIndex  ;
  
  if (!swig_callbackonImageProcess) {
    Swig::DirectorPureVirtualException::raise("aoce::IOutputLayerObserver::onImageProcess");
    return;
  } else {
    jdata = (void *) data; 
    jimageFormat = (aoce::ImageFormat *) &imageFormat; 
    joutIndex = outIndex;
    swig_callbackonImageProcess(jdata, jimageFormat, joutIndex);
  }
}

void SwigDirector_IOutputLayerObserver::onFormatChanged(aoce::ImageFormat const &imageFormat, int32_t outIndex) {
  void * jimageFormat = 0 ;
  int joutIndex  ;
  
  if (!swig_callbackonFormatChanged) {
    aoce::IOutputLayerObserver::onFormatChanged(imageFormat,outIndex);
    return;
  } else {
    jimageFormat = (aoce::ImageFormat *) &imageFormat; 
    joutIndex = outIndex;
    swig_callbackonFormatChanged(jimageFormat, joutIndex);
  }
}

void SwigDirector_IOutputLayerObserver::swig_connect_director(SWIG_Callback0_t callbackonImageProcess, SWIG_Callback1_t callbackonFormatChanged) {
  swig_callbackonImageProcess = callbackonImageProcess;
  swig_callbackonFormatChanged = callbackonFormatChanged;
}

void SwigDirector_IOutputLayerObserver::swig_init_callbacks() {
  swig_callbackonImageProcess = 0;
  swig_callbackonFormatChanged = 0;
}

SwigDirector_ICaptureObserver::SwigDirector_ICaptureObserver() : aoce::ICaptureObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ICaptureObserver::~SwigDirector_ICaptureObserver() {
  
}


void SwigDirector_ICaptureObserver::onEvent(aoce::CaptureEventId eventId, aoce::LogLevel level, char const *msg) {
  int jeventId  ;
  int jlevel  ;
  char * jmsg = 0 ;
  
  if (!swig_callbackonEvent) {
    aoce::ICaptureObserver::onEvent(eventId,level,msg);
    return;
  } else {
    jeventId = (int)eventId;
    jlevel = (int)level;
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackonEvent(jeventId, jlevel, jmsg);
  }
}

void SwigDirector_ICaptureObserver::onResize(int32_t width, int32_t height) {
  int jwidth  ;
  int jheight  ;
  
  if (!swig_callbackonResize) {
    aoce::ICaptureObserver::onResize(width,height);
    return;
  } else {
    jwidth = width;
    jheight = height;
    swig_callbackonResize(jwidth, jheight);
  }
}

void SwigDirector_ICaptureObserver::onCapture(aoce::VideoFormat const &videoFormat, void *device, void *texture) {
  void * jvideoFormat = 0 ;
  void * jdevice = 0 ;
  void * jtexture = 0 ;
  
  if (!swig_callbackonCapture) {
    aoce::ICaptureObserver::onCapture(videoFormat,device,texture);
    return;
  } else {
    jvideoFormat = (aoce::VideoFormat *) &videoFormat; 
    jdevice = (void *) device; 
    jtexture = (void *) texture; 
    swig_callbackonCapture(jvideoFormat, jdevice, jtexture);
  }
}

void SwigDirector_ICaptureObserver::swig_connect_director(SWIG_Callback0_t callbackonEvent, SWIG_Callback1_t callbackonResize, SWIG_Callback2_t callbackonCapture) {
  swig_callbackonEvent = callbackonEvent;
  swig_callbackonResize = callbackonResize;
  swig_callbackonCapture = callbackonCapture;
}

void SwigDirector_ICaptureObserver::swig_init_callbacks() {
  swig_callbackonEvent = 0;
  swig_callbackonResize = 0;
  swig_callbackonCapture = 0;
}

SwigDirector_IAudioDeviceObserver::SwigDirector_IAudioDeviceObserver() : aoce::IAudioDeviceObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IAudioDeviceObserver::~SwigDirector_IAudioDeviceObserver() {
  
}


void SwigDirector_IAudioDeviceObserver::onDeviceHandle(aoce::VideoHandleId id, int32_t codeId) {
  int jid  ;
  int jcodeId  ;
  
  if (!swig_callbackonDeviceHandle) {
    aoce::IAudioDeviceObserver::onDeviceHandle(id,codeId);
    return;
  } else {
    jid = (int)id;
    jcodeId = codeId;
    swig_callbackonDeviceHandle(jid, jcodeId);
  }
}

void SwigDirector_IAudioDeviceObserver::onAudioFrame(aoce::AudioFrame const &audioFrame) {
  void * jaudioFrame = 0 ;
  
  if (!swig_callbackonAudioFrame) {
    aoce::IAudioDeviceObserver::onAudioFrame(audioFrame);
    return;
  } else {
    jaudioFrame = (aoce::AudioFrame *) &audioFrame; 
    swig_callbackonAudioFrame(jaudioFrame);
  }
}

void SwigDirector_IAudioDeviceObserver::swig_connect_director(SWIG_Callback0_t callbackonDeviceHandle, SWIG_Callback1_t callbackonAudioFrame) {
  swig_callbackonDeviceHandle = callbackonDeviceHandle;
  swig_callbackonAudioFrame = callbackonAudioFrame;
}

void SwigDirector_IAudioDeviceObserver::swig_init_callbacks() {
  swig_callbackonDeviceHandle = 0;
  swig_callbackonAudioFrame = 0;
}

SwigDirector_ILogObserver::SwigDirector_ILogObserver() : aoce::ILogObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ILogObserver::~SwigDirector_ILogObserver() {
  
}


void SwigDirector_ILogObserver::onLogEvent(int level, char const *message) {
  int jlevel  ;
  char * jmessage = 0 ;
  
  if (!swig_callbackonLogEvent) {
    Swig::DirectorPureVirtualException::raise("aoce::ILogObserver::onLogEvent");
    return;
  } else {
    jlevel = level;
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    swig_callbackonLogEvent(jlevel, jmessage);
  }
}

void SwigDirector_ILogObserver::swig_connect_director(SWIG_Callback0_t callbackonLogEvent) {
  swig_callbackonLogEvent = callbackonLogEvent;
}

void SwigDirector_ILogObserver::swig_init_callbacks() {
  swig_callbackonLogEvent = 0;
}

SwigDirector_IMotionDetectorObserver::SwigDirector_IMotionDetectorObserver() : aoce::IMotionDetectorObserver(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IMotionDetectorObserver::~SwigDirector_IMotionDetectorObserver() {
  
}


void SwigDirector_IMotionDetectorObserver::onMotion(aoce::vec4 const &vec) {
  void * jvec = 0 ;
  
  if (!swig_callbackonMotion) {
    Swig::DirectorPureVirtualException::raise("aoce::IMotionDetectorObserver::onMotion");
    return;
  } else {
    jvec = (aoce::vec4 *) &vec; 
    swig_callbackonMotion(jvec);
  }
}

void SwigDirector_IMotionDetectorObserver::swig_connect_director(SWIG_Callback0_t callbackonMotion) {
  swig_callbackonMotion = callbackonMotion;
}

void SwigDirector_IMotionDetectorObserver::swig_init_callbacks() {
  swig_callbackonMotion = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  IntArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (IntArray *)new_IntArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArray(void * jarg1) {
  IntArray *arg1 = (IntArray *) 0 ;
  
  arg1 = (IntArray *)jarg1; 
  delete_IntArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_getitem(void * jarg1, int jarg2) {
  int jresult ;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)IntArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_setitem(void * jarg1, int jarg2, int jarg3) {
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  IntArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_cast(void * jarg1) {
  void * jresult ;
  IntArray *arg1 = (IntArray *) 0 ;
  int *result = 0 ;
  
  arg1 = (IntArray *)jarg1; 
  result = (int *)IntArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_frompointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  IntArray *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (IntArray *)IntArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UInt8Array(int jarg1) {
  void * jresult ;
  int arg1 ;
  UInt8Array *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (UInt8Array *)new_UInt8Array(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UInt8Array(void * jarg1) {
  UInt8Array *arg1 = (UInt8Array *) 0 ;
  
  arg1 = (UInt8Array *)jarg1; 
  delete_UInt8Array(arg1);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_UInt8Array_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  UInt8Array *arg1 = (UInt8Array *) 0 ;
  int arg2 ;
  uint8_t result;
  
  arg1 = (UInt8Array *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint8_t)UInt8Array_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UInt8Array_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  UInt8Array *arg1 = (UInt8Array *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  
  arg1 = (UInt8Array *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  UInt8Array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UInt8Array_cast(void * jarg1) {
  void * jresult ;
  UInt8Array *arg1 = (UInt8Array *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (UInt8Array *)jarg1; 
  result = (uint8_t *)UInt8Array_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UInt8Array_frompointer(void * jarg1) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  UInt8Array *result = 0 ;
  
  arg1 = (uint8_t *)jarg1; 
  result = (UInt8Array *)UInt8Array_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFormat_index_set(void * jarg1, int jarg2) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFormat_index_get(void * jarg1) {
  int jresult ;
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  result = (int32_t) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFormat_width_set(void * jarg1, int jarg2) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFormat_width_get(void * jarg1) {
  int jresult ;
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFormat_height_set(void * jarg1, int jarg2) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFormat_height_get(void * jarg1) {
  int jresult ;
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  result = (int32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFormat_fps_set(void * jarg1, int jarg2) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFormat_fps_get(void * jarg1) {
  int jresult ;
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  result = (int32_t) ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFormat_videoType_set(void * jarg1, int jarg2) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  aoce::VideoType arg2 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  arg2 = (aoce::VideoType)jarg2; 
  if (arg1) (arg1)->videoType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFormat_videoType_get(void * jarg1) {
  int jresult ;
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  aoce::VideoType result;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  result = (aoce::VideoType) ((arg1)->videoType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoFormat() {
  void * jresult ;
  aoce::VideoFormat *result = 0 ;
  
  result = (aoce::VideoFormat *)new aoce::VideoFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoFormat(void * jarg1) {
  aoce::VideoFormat *arg1 = (aoce::VideoFormat *) 0 ;
  
  arg1 = (aoce::VideoFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFormat_width_set(void * jarg1, int jarg2) {
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFormat_width_get(void * jarg1) {
  int jresult ;
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFormat_height_set(void * jarg1, int jarg2) {
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFormat_height_get(void * jarg1) {
  int jresult ;
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  result = (int32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFormat_imageType_set(void * jarg1, int jarg2) {
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  aoce::ImageType arg2 ;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  arg2 = (aoce::ImageType)jarg2; 
  if (arg1) (arg1)->imageType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageFormat_imageType_get(void * jarg1) {
  int jresult ;
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  aoce::ImageType result;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  result = (aoce::ImageType) ((arg1)->imageType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageFormat() {
  void * jresult ;
  aoce::ImageFormat *result = 0 ;
  
  result = (aoce::ImageFormat *)new aoce::ImageFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageFormat(void * jarg1) {
  aoce::ImageFormat *arg1 = (aoce::ImageFormat *) 0 ;
  
  arg1 = (aoce::ImageFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_codec_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  aoce::VideoCodec arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (aoce::VideoCodec)jarg2; 
  if (arg1) (arg1)->codec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_codec_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  aoce::VideoCodec result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (aoce::VideoCodec) ((arg1)->codec);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_width_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_width_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_height_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_height_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (int32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_fps_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_fps_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (int32_t) ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_bitrate_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bitrate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_bitrate_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (int32_t) ((arg1)->bitrate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoStream_videoType_set(void * jarg1, int jarg2) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  aoce::VideoType arg2 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  arg2 = (aoce::VideoType)jarg2; 
  if (arg1) (arg1)->videoType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoStream_videoType_get(void * jarg1) {
  int jresult ;
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  aoce::VideoType result;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  result = (aoce::VideoType) ((arg1)->videoType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoStream() {
  void * jresult ;
  aoce::VideoStream *result = 0 ;
  
  result = (aoce::VideoStream *)new aoce::VideoStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoStream(void * jarg1) {
  aoce::VideoStream *arg1 = (aoce::VideoStream *) 0 ;
  
  arg1 = (aoce::VideoStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStream_codec_set(void * jarg1, int jarg2) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  aoce::AudioCodec arg2 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  arg2 = (aoce::AudioCodec)jarg2; 
  if (arg1) (arg1)->codec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStream_codec_get(void * jarg1) {
  int jresult ;
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  aoce::AudioCodec result;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  result = (aoce::AudioCodec) ((arg1)->codec);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStream_channel_set(void * jarg1, int jarg2) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->channel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStream_channel_get(void * jarg1) {
  int jresult ;
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  result = (int32_t) ((arg1)->channel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStream_sampleRate_set(void * jarg1, int jarg2) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sampleRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStream_sampleRate_get(void * jarg1) {
  int jresult ;
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  result = (int32_t) ((arg1)->sampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStream_depth_set(void * jarg1, int jarg2) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStream_depth_get(void * jarg1) {
  int jresult ;
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  result = (int32_t) ((arg1)->depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStream_bitrate_set(void * jarg1, int jarg2) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bitrate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStream_bitrate_get(void * jarg1) {
  int jresult ;
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  result = (int32_t) ((arg1)->bitrate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStream() {
  void * jresult ;
  aoce::AudioStream *result = 0 ;
  
  result = (aoce::AudioStream *)new aoce::AudioStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStream(void * jarg1) {
  aoce::AudioStream *arg1 = (aoce::AudioStream *) 0 ;
  
  arg1 = (aoce::AudioStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_width_set(void * jarg1, int jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFrame_width_get(void * jarg1) {
  int jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_height_set(void * jarg1, int jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFrame_height_get(void * jarg1) {
  int jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (int32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_timeStamp_set(void * jarg1, long long jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int64_t arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->timeStamp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_VideoFrame_timeStamp_get(void * jarg1) {
  long long jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int64_t result;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (int64_t) ((arg1)->timeStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_videoType_set(void * jarg1, int jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  aoce::VideoType arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (aoce::VideoType)jarg2; 
  if (arg1) (arg1)->videoType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoFrame_videoType_get(void * jarg1) {
  int jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  aoce::VideoType result;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (aoce::VideoType) ((arg1)->videoType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_data_set(void * jarg1, void * jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  uint8_t **arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (uint8_t **)jarg2; 
  {
    size_t ii;
    uint8_t * *b = (uint8_t * *) arg1->data;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoFrame_data_get(void * jarg1) {
  void * jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  uint8_t **result = 0 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (uint8_t **)(uint8_t **) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoFrame_dataAlign_set(void * jarg1, void * jarg2) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t *arg2 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  arg2 = (int32_t *)jarg2; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->dataAlign;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoFrame_dataAlign_get(void * jarg1) {
  void * jresult ;
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  int32_t *result = 0 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->dataAlign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoFrame() {
  void * jresult ;
  aoce::VideoFrame *result = 0 ;
  
  result = (aoce::VideoFrame *)new aoce::VideoFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoFrame(void * jarg1) {
  aoce::VideoFrame *arg1 = (aoce::VideoFrame *) 0 ;
  
  arg1 = (aoce::VideoFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_channel_set(void * jarg1, int jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->channel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFrame_channel_get(void * jarg1) {
  int jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (int32_t) ((arg1)->channel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_sampleRate_set(void * jarg1, int jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sampleRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFrame_sampleRate_get(void * jarg1) {
  int jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (int32_t) ((arg1)->sampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_depth_set(void * jarg1, int jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFrame_depth_get(void * jarg1) {
  int jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (int32_t) ((arg1)->depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_timeStamp_set(void * jarg1, long long jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int64_t arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->timeStamp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_AudioFrame_timeStamp_get(void * jarg1) {
  long long jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int64_t result;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (int64_t) ((arg1)->timeStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_dataSize_set(void * jarg1, int jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->dataSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFrame_dataSize_get(void * jarg1) {
  int jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (int32_t) ((arg1)->dataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFrame_data_set(void * jarg1, void * jarg2) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  uint8_t **arg2 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  arg2 = (uint8_t **)jarg2; 
  {
    size_t ii;
    uint8_t * *b = (uint8_t * *) arg1->data;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint8_t * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioFrame_data_get(void * jarg1) {
  void * jresult ;
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  uint8_t **result = 0 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  result = (uint8_t **)(uint8_t **) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioFrame() {
  void * jresult ;
  aoce::AudioFrame *result = 0 ;
  
  result = (aoce::AudioFrame *)new aoce::AudioFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioFrame(void * jarg1) {
  aoce::AudioFrame *arg1 = (aoce::AudioFrame *) 0 ;
  
  arg1 = (aoce::AudioFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_YUVParamet_type_set(void * jarg1, int jarg2) {
  aoce::YUVParamet *arg1 = (aoce::YUVParamet *) 0 ;
  aoce::VideoType arg2 ;
  
  arg1 = (aoce::YUVParamet *)jarg1; 
  arg2 = (aoce::VideoType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_YUVParamet_type_get(void * jarg1) {
  int jresult ;
  aoce::YUVParamet *arg1 = (aoce::YUVParamet *) 0 ;
  aoce::VideoType result;
  
  arg1 = (aoce::YUVParamet *)jarg1; 
  result = (aoce::VideoType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_YUVParamet_special_set(void * jarg1, int jarg2) {
  aoce::YUVParamet *arg1 = (aoce::YUVParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::YUVParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->special = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_YUVParamet_special_get(void * jarg1) {
  int jresult ;
  aoce::YUVParamet *arg1 = (aoce::YUVParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::YUVParamet *)jarg1; 
  result = (int32_t) ((arg1)->special);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_YUVParamet() {
  void * jresult ;
  aoce::YUVParamet *result = 0 ;
  
  result = (aoce::YUVParamet *)new aoce::YUVParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_YUVParamet(void * jarg1) {
  aoce::YUVParamet *arg1 = (aoce::YUVParamet *) 0 ;
  
  arg1 = (aoce::YUVParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapChannelParamet_red_set(void * jarg1, int jarg2) {
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->red = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapChannelParamet_red_get(void * jarg1) {
  int jresult ;
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  result = (int32_t) ((arg1)->red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapChannelParamet_green_set(void * jarg1, int jarg2) {
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->green = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapChannelParamet_green_get(void * jarg1) {
  int jresult ;
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  result = (int32_t) ((arg1)->green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapChannelParamet_blue_set(void * jarg1, int jarg2) {
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->blue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapChannelParamet_blue_get(void * jarg1) {
  int jresult ;
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  result = (int32_t) ((arg1)->blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapChannelParamet_alpha_set(void * jarg1, int jarg2) {
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->alpha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapChannelParamet_alpha_get(void * jarg1) {
  int jresult ;
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  result = (int32_t) ((arg1)->alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapChannelParamet() {
  void * jresult ;
  aoce::MapChannelParamet *result = 0 ;
  
  result = (aoce::MapChannelParamet *)new aoce::MapChannelParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapChannelParamet(void * jarg1) {
  aoce::MapChannelParamet *arg1 = (aoce::MapChannelParamet *) 0 ;
  
  arg1 = (aoce::MapChannelParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlipParamet_bFlipX_set(void * jarg1, int jarg2) {
  aoce::FlipParamet *arg1 = (aoce::FlipParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::FlipParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bFlipX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FlipParamet_bFlipX_get(void * jarg1) {
  int jresult ;
  aoce::FlipParamet *arg1 = (aoce::FlipParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::FlipParamet *)jarg1; 
  result = (int32_t) ((arg1)->bFlipX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FlipParamet_bFlipY_set(void * jarg1, int jarg2) {
  aoce::FlipParamet *arg1 = (aoce::FlipParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::FlipParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bFlipY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FlipParamet_bFlipY_get(void * jarg1) {
  int jresult ;
  aoce::FlipParamet *arg1 = (aoce::FlipParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::FlipParamet *)jarg1; 
  result = (int32_t) ((arg1)->bFlipY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FlipParamet() {
  void * jresult ;
  aoce::FlipParamet *result = 0 ;
  
  result = (aoce::FlipParamet *)new aoce::FlipParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FlipParamet(void * jarg1) {
  aoce::FlipParamet *arg1 = (aoce::FlipParamet *) 0 ;
  
  arg1 = (aoce::FlipParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlendParamet_centerX_set(void * jarg1, float jarg2) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->centerX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BlendParamet_centerX_get(void * jarg1) {
  float jresult ;
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  result = (float) ((arg1)->centerX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlendParamet_centerY_set(void * jarg1, float jarg2) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->centerY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BlendParamet_centerY_get(void * jarg1) {
  float jresult ;
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  result = (float) ((arg1)->centerY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlendParamet_width_set(void * jarg1, float jarg2) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BlendParamet_width_get(void * jarg1) {
  float jresult ;
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlendParamet_height_set(void * jarg1, float jarg2) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BlendParamet_height_get(void * jarg1) {
  float jresult ;
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlendParamet_alaph_set(void * jarg1, float jarg2) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alaph = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BlendParamet_alaph_get(void * jarg1) {
  float jresult ;
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  result = (float) ((arg1)->alaph);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BlendParamet() {
  void * jresult ;
  aoce::BlendParamet *result = 0 ;
  
  result = (aoce::BlendParamet *)new aoce::BlendParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BlendParamet(void * jarg1) {
  aoce::BlendParamet *arg1 = (aoce::BlendParamet *) 0 ;
  
  arg1 = (aoce::BlendParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransposeParamet_bFlipX_set(void * jarg1, int jarg2) {
  aoce::TransposeParamet *arg1 = (aoce::TransposeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::TransposeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bFlipX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransposeParamet_bFlipX_get(void * jarg1) {
  int jresult ;
  aoce::TransposeParamet *arg1 = (aoce::TransposeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::TransposeParamet *)jarg1; 
  result = (int32_t) ((arg1)->bFlipX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransposeParamet_bFlipY_set(void * jarg1, int jarg2) {
  aoce::TransposeParamet *arg1 = (aoce::TransposeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::TransposeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bFlipY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransposeParamet_bFlipY_get(void * jarg1) {
  int jresult ;
  aoce::TransposeParamet *arg1 = (aoce::TransposeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::TransposeParamet *)jarg1; 
  result = (int32_t) ((arg1)->bFlipY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransposeParamet() {
  void * jresult ;
  aoce::TransposeParamet *result = 0 ;
  
  result = (aoce::TransposeParamet *)new aoce::TransposeParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TransposeParamet(void * jarg1) {
  aoce::TransposeParamet *arg1 = (aoce::TransposeParamet *) 0 ;
  
  arg1 = (aoce::TransposeParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReSizeParamet_bLinear_set(void * jarg1, int jarg2) {
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bLinear = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReSizeParamet_bLinear_get(void * jarg1) {
  int jresult ;
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  result = (int32_t) ((arg1)->bLinear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReSizeParamet_newWidth_set(void * jarg1, int jarg2) {
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->newWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReSizeParamet_newWidth_get(void * jarg1) {
  int jresult ;
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  result = (int32_t) ((arg1)->newWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReSizeParamet_newHeight_set(void * jarg1, int jarg2) {
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->newHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReSizeParamet_newHeight_get(void * jarg1) {
  int jresult ;
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  result = (int32_t) ((arg1)->newHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReSizeParamet() {
  void * jresult ;
  aoce::ReSizeParamet *result = 0 ;
  
  result = (aoce::ReSizeParamet *)new aoce::ReSizeParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ReSizeParamet(void * jarg1) {
  aoce::ReSizeParamet *arg1 = (aoce::ReSizeParamet *) 0 ;
  
  arg1 = (aoce::ReSizeParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeScaleParamet_bLinear_set(void * jarg1, int jarg2) {
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bLinear = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SizeScaleParamet_bLinear_get(void * jarg1) {
  int jresult ;
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  result = (int32_t) ((arg1)->bLinear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeScaleParamet_fx_set(void * jarg1, float jarg2) {
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fx = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SizeScaleParamet_fx_get(void * jarg1) {
  float jresult ;
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  result = (float) ((arg1)->fx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SizeScaleParamet_fy_set(void * jarg1, float jarg2) {
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fy = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SizeScaleParamet_fy_get(void * jarg1) {
  float jresult ;
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  result = (float) ((arg1)->fy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SizeScaleParamet() {
  void * jresult ;
  aoce::SizeScaleParamet *result = 0 ;
  
  result = (aoce::SizeScaleParamet *)new aoce::SizeScaleParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SizeScaleParamet(void * jarg1) {
  aoce::SizeScaleParamet *arg1 = (aoce::SizeScaleParamet *) 0 ;
  
  arg1 = (aoce::SizeScaleParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_logMessage(int jarg1, char * jarg2) {
  aoce::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (aoce::LogLevel)jarg1; 
  arg2 = (char *)jarg2; 
  aoce::logMessage(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getLogLevel(int jarg1) {
  char * jresult ;
  aoce::LogLevel arg1 ;
  char *result = 0 ;
  
  arg1 = (aoce::LogLevel)jarg1; 
  result = (char *)aoce::getLogLevel(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getVideoType(int jarg1) {
  char * jresult ;
  aoce::VideoType *arg1 = 0 ;
  aoce::VideoType temp1 ;
  char *result = 0 ;
  
  temp1 = (aoce::VideoType)jarg1; 
  arg1 = &temp1; 
  result = (char *)aoce::getVideoType((enum aoce::VideoType const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_getImageType(int jarg1) {
  char * jresult ;
  aoce::ImageType *arg1 = 0 ;
  aoce::ImageType temp1 ;
  char *result = 0 ;
  
  temp1 = (aoce::ImageType)jarg1; 
  arg1 = &temp1; 
  result = (char *)aoce::getImageType((enum aoce::ImageType const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_divUp(int jarg1, int jarg2) {
  unsigned int jresult ;
  int32_t arg1 ;
  int32_t arg2 ;
  uint32_t result;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (uint32_t)aoce::divUp(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_getNowTimeStamp() {
  long long jresult ;
  long long result;
  
  result = (long long)aoce::getNowTimeStamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_videoType2ImageType(int jarg1) {
  int jresult ;
  aoce::VideoType *arg1 = 0 ;
  aoce::VideoType temp1 ;
  aoce::ImageType result;
  
  temp1 = (aoce::VideoType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::ImageType)aoce::videoType2ImageType((enum aoce::VideoType const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_imageType2VideoType(int jarg1) {
  int jresult ;
  aoce::ImageType *arg1 = 0 ;
  aoce::ImageType temp1 ;
  aoce::VideoType result;
  
  temp1 = (aoce::ImageType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::VideoType)aoce::imageType2VideoType((enum aoce::ImageType const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getYuvIndex(int jarg1) {
  int jresult ;
  aoce::VideoType *arg1 = 0 ;
  aoce::VideoType temp1 ;
  int32_t result;
  
  temp1 = (aoce::VideoType)jarg1; 
  arg1 = &temp1; 
  result = (int32_t)aoce::getYuvIndex((enum aoce::VideoType const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_videoFormat2ImageFormat(void * jarg1) {
  void * jresult ;
  aoce::VideoFormat *arg1 = 0 ;
  aoce::ImageFormat result;
  
  arg1 = (aoce::VideoFormat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFormat const & type is null", 0);
    return 0;
  } 
  result = aoce::videoFormat2ImageFormat((aoce::VideoFormat const &)*arg1);
  jresult = new aoce::ImageFormat((const aoce::ImageFormat &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getImageTypeSize(int jarg1) {
  int jresult ;
  aoce::ImageType *arg1 = 0 ;
  aoce::ImageType temp1 ;
  int32_t result;
  
  temp1 = (aoce::ImageType)jarg1; 
  arg1 = &temp1; 
  result = (int32_t)aoce::getImageTypeSize((enum aoce::ImageType const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_getVideoFrame(void * jarg1, void * jarg2) {
  int jresult ;
  aoce::VideoFrame *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) nullptr ;
  int32_t result;
  
  arg1 = (aoce::VideoFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return 0;
  } 
  arg2 = (uint8_t *)jarg2; 
  result = (int32_t)aoce::getVideoFrame((aoce::VideoFrame const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_createVideoFrame(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  aoce::VideoFrame *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  aoce::VideoType arg5 ;
  
  arg1 = (aoce::VideoFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame & type is null", 0);
    return ;
  } 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (aoce::VideoType)jarg5; 
  aoce::createVideoFrame(*arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_loadAoce() {
  aoce::loadAoce();
}


SWIGEXPORT void SWIGSTDCALL CSharp_unloadAoce() {
  aoce::unloadAoce();
}


SWIGEXPORT void SWIGSTDCALL CSharp_initPlatform() {
  aoce::initPlatform();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushSetting_bAudio_set(void * jarg1, int jarg2) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bAudio = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PushSetting_bAudio_get(void * jarg1) {
  int jresult ;
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  result = (int32_t) ((arg1)->bAudio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushSetting_bVideo_set(void * jarg1, int jarg2) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bVideo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PushSetting_bVideo_get(void * jarg1) {
  int jresult ;
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  result = (int32_t) ((arg1)->bVideo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushSetting_videoStream_set(void * jarg1, void * jarg2) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  aoce::VideoStream *arg2 = (aoce::VideoStream *) 0 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  arg2 = (aoce::VideoStream *)jarg2; 
  if (arg1) (arg1)->videoStream = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PushSetting_videoStream_get(void * jarg1) {
  void * jresult ;
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  aoce::VideoStream *result = 0 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  result = (aoce::VideoStream *)& ((arg1)->videoStream);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushSetting_audioStream_set(void * jarg1, void * jarg2) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  aoce::AudioStream *arg2 = (aoce::AudioStream *) 0 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  arg2 = (aoce::AudioStream *)jarg2; 
  if (arg1) (arg1)->audioStream = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PushSetting_audioStream_get(void * jarg1) {
  void * jresult ;
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  aoce::AudioStream *result = 0 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  result = (aoce::AudioStream *)& ((arg1)->audioStream);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushSetting_bCDN_set(void * jarg1, int jarg2) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bCDN = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PushSetting_bCDN_get(void * jarg1) {
  int jresult ;
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  result = (int32_t) ((arg1)->bCDN);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PushSetting() {
  void * jresult ;
  aoce::PushSetting *result = 0 ;
  
  result = (aoce::PushSetting *)new aoce::PushSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PushSetting(void * jarg1) {
  aoce::PushSetting *arg1 = (aoce::PushSetting *) 0 ;
  
  arg1 = (aoce::PushSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullSetting_bAudio_set(void * jarg1, int jarg2) {
  aoce::PullSetting *arg1 = (aoce::PullSetting *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PullSetting *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bAudio = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PullSetting_bAudio_get(void * jarg1) {
  int jresult ;
  aoce::PullSetting *arg1 = (aoce::PullSetting *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PullSetting *)jarg1; 
  result = (int32_t) ((arg1)->bAudio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullSetting_bVideo_set(void * jarg1, int jarg2) {
  aoce::PullSetting *arg1 = (aoce::PullSetting *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PullSetting *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bVideo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PullSetting_bVideo_get(void * jarg1) {
  int jresult ;
  aoce::PullSetting *arg1 = (aoce::PullSetting *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PullSetting *)jarg1; 
  result = (int32_t) ((arg1)->bVideo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PullSetting() {
  void * jresult ;
  aoce::PullSetting *result = 0 ;
  
  result = (aoce::PullSetting *)new aoce::PullSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PullSetting(void * jarg1) {
  aoce::PullSetting *arg1 = (aoce::PullSetting *) 0 ;
  
  arg1 = (aoce::PullSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullStream_userId_set(void * jarg1, int jarg2) {
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->userId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PullStream_userId_get(void * jarg1) {
  int jresult ;
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PullStream *)jarg1; 
  result = (int32_t) ((arg1)->userId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullStream_streamId_set(void * jarg1, int jarg2) {
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->streamId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PullStream_streamId_get(void * jarg1) {
  int jresult ;
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PullStream *)jarg1; 
  result = (int32_t) ((arg1)->streamId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullStream_bOpen_set(void * jarg1, int jarg2) {
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bOpen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PullStream_bOpen_get(void * jarg1) {
  int jresult ;
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PullStream *)jarg1; 
  result = (int32_t) ((arg1)->bOpen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PullStream_setting_set(void * jarg1, void * jarg2) {
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  aoce::PullSetting *arg2 = (aoce::PullSetting *) 0 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  arg2 = (aoce::PullSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PullStream_setting_get(void * jarg1) {
  void * jresult ;
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  aoce::PullSetting *result = 0 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  result = (aoce::PullSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PullStream() {
  void * jresult ;
  aoce::PullStream *result = 0 ;
  
  result = (aoce::PullStream *)new aoce::PullStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PullStream(void * jarg1) {
  aoce::PullStream *arg1 = (aoce::PullStream *) 0 ;
  
  arg1 = (aoce::PullStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStream_bOpen_set(void * jarg1, int jarg2) {
  aoce::PushStream *arg1 = (aoce::PushStream *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PushStream *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bOpen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PushStream_bOpen_get(void * jarg1) {
  int jresult ;
  aoce::PushStream *arg1 = (aoce::PushStream *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PushStream *)jarg1; 
  result = (int32_t) ((arg1)->bOpen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStream_setting_set(void * jarg1, void * jarg2) {
  aoce::PushStream *arg1 = (aoce::PushStream *) 0 ;
  aoce::PushSetting *arg2 = (aoce::PushSetting *) 0 ;
  
  arg1 = (aoce::PushStream *)jarg1; 
  arg2 = (aoce::PushSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PushStream_setting_get(void * jarg1) {
  void * jresult ;
  aoce::PushStream *arg1 = (aoce::PushStream *) 0 ;
  aoce::PushSetting *result = 0 ;
  
  arg1 = (aoce::PushStream *)jarg1; 
  result = (aoce::PushSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PushStream() {
  void * jresult ;
  aoce::PushStream *result = 0 ;
  
  result = (aoce::PushStream *)new aoce::PushStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PushStream(void * jarg1) {
  aoce::PushStream *arg1 = (aoce::PushStream *) 0 ;
  
  arg1 = (aoce::PushStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AgoraContext_bSFEncoder_set(void * jarg1, int jarg2) {
  aoce::AgoraContext *arg1 = (aoce::AgoraContext *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AgoraContext *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bSFEncoder = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AgoraContext_bSFEncoder_get(void * jarg1) {
  int jresult ;
  aoce::AgoraContext *arg1 = (aoce::AgoraContext *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AgoraContext *)jarg1; 
  result = (int32_t) ((arg1)->bSFEncoder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AgoraContext_bLoopback_set(void * jarg1, int jarg2) {
  aoce::AgoraContext *arg1 = (aoce::AgoraContext *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AgoraContext *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bLoopback = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AgoraContext_bLoopback_get(void * jarg1) {
  int jresult ;
  aoce::AgoraContext *arg1 = (aoce::AgoraContext *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AgoraContext *)jarg1; 
  result = (int32_t) ((arg1)->bLoopback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AgoraContext() {
  void * jresult ;
  aoce::AgoraContext *result = 0 ;
  
  result = (aoce::AgoraContext *)new aoce::AgoraContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AgoraContext(void * jarg1) {
  aoce::AgoraContext *arg1 = (aoce::AgoraContext *) 0 ;
  
  arg1 = (aoce::AgoraContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILiveObserver(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onEvent(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::LogLevel arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::LogLevel)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->onEvent(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onEventSwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::LogLevel arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::LogLevel)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->aoce::ILiveObserver::onEvent(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onInitRoom(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->onInitRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onInitRoomSwigExplicitILiveObserver(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->aoce::ILiveObserver::onInitRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLoginRoom__SWIG_0(void * jarg1, unsigned int jarg2) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->onLoginRoom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLoginRoomSwigExplicitILiveObserver__SWIG_0(void * jarg1, unsigned int jarg2) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->aoce::ILiveObserver::onLoginRoom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLoginRoom__SWIG_1(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->onLoginRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLoginRoomSwigExplicitILiveObserver__SWIG_1(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->aoce::ILiveObserver::onLoginRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onUserChange(void * jarg1, int jarg2, unsigned int jarg3) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->onUserChange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onUserChangeSwigExplicitILiveObserver(void * jarg1, int jarg2, unsigned int jarg3) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->aoce::ILiveObserver::onUserChange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onStreamUpdate__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  int32_t arg4 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int32_t)jarg4; 
  (arg1)->onStreamUpdate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onStreamUpdateSwigExplicitILiveObserver__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  int32_t arg4 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int32_t)jarg4; 
  (arg1)->aoce::ILiveObserver::onStreamUpdate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onStreamUpdate__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  bool arg4 ;
  int32_t arg5 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int32_t)jarg5; 
  (arg1)->onStreamUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onStreamUpdateSwigExplicitILiveObserver__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  bool arg4 ;
  int32_t arg5 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int32_t)jarg5; 
  (arg1)->aoce::ILiveObserver::onStreamUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onVideoFrame(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::VideoFrame *arg4 = 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::VideoFrame *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  (arg1)->onVideoFrame(arg2,arg3,(aoce::VideoFrame const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onVideoFrameSwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::VideoFrame *arg4 = 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::VideoFrame *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  (arg1)->aoce::ILiveObserver::onVideoFrame(arg2,arg3,(aoce::VideoFrame const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onAudioFrame(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::AudioFrame *arg4 = 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::AudioFrame *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->onAudioFrame(arg2,arg3,(aoce::AudioFrame const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onAudioFrameSwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::AudioFrame *arg4 = 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::AudioFrame *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->aoce::ILiveObserver::onAudioFrame(arg2,arg3,(aoce::AudioFrame const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPlayVolume(void * jarg1, int jarg2, int jarg3, float jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->onPlayVolume(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPlayVolumeSwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, float jarg4) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->aoce::ILiveObserver::onPlayVolume(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPushQuality(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->onPushQuality(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPushQualitySwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->aoce::ILiveObserver::onPushQuality(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPullQuality(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->onPullQuality(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onPullQualitySwigExplicitILiveObserver(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->aoce::ILiveObserver::onPullQuality(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLogoutRoom(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->onLogoutRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_onLogoutRoomSwigExplicitILiveObserver(void * jarg1) {
  aoce::ILiveObserver *arg1 = (aoce::ILiveObserver *) 0 ;
  
  arg1 = (aoce::ILiveObserver *)jarg1; 
  (arg1)->aoce::ILiveObserver::onLogoutRoom();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ILiveObserver() {
  void * jresult ;
  aoce::ILiveObserver *result = 0 ;
  
  result = (aoce::ILiveObserver *)new SwigDirector_ILiveObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveObserver_director_connect(void *objarg, SwigDirector_ILiveObserver::SWIG_Callback0_t callback0, SwigDirector_ILiveObserver::SWIG_Callback1_t callback1, SwigDirector_ILiveObserver::SWIG_Callback2_t callback2, SwigDirector_ILiveObserver::SWIG_Callback3_t callback3, SwigDirector_ILiveObserver::SWIG_Callback4_t callback4, SwigDirector_ILiveObserver::SWIG_Callback5_t callback5, SwigDirector_ILiveObserver::SWIG_Callback6_t callback6, SwigDirector_ILiveObserver::SWIG_Callback7_t callback7, SwigDirector_ILiveObserver::SWIG_Callback8_t callback8, SwigDirector_ILiveObserver::SWIG_Callback9_t callback9, SwigDirector_ILiveObserver::SWIG_Callback10_t callback10, SwigDirector_ILiveObserver::SWIG_Callback11_t callback11, SwigDirector_ILiveObserver::SWIG_Callback12_t callback12) {
  aoce::ILiveObserver *obj = (aoce::ILiveObserver *)objarg;
  SwigDirector_ILiveObserver *director = static_cast<SwigDirector_ILiveObserver *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILiveRoom(void * jarg1) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILiveRoom_getUserId(void * jarg1) {
  int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  result = (int32_t)(arg1)->getUserId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILiveRoom_getPullIndex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (int32_t)(arg1)->getPullIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ILiveRoom_getMicVolume(void * jarg1) {
  float jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  float result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  result = (float)(arg1)->getMicVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveRoom_setPlayVolume(void * jarg1, int jarg2) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->setPlayVolume(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_initRoom(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  void *arg2 = (void *) 0 ;
  aoce::ILiveObserver *arg3 = (aoce::ILiveObserver *) 0 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (aoce::ILiveObserver *)jarg3; 
  result = (bool)(arg1)->initRoom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_loginRoom(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (bool)(arg1)->loginRoom((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_pushStream(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  aoce::PushSetting *arg3 = 0 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (aoce::PushSetting *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PushSetting const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pushStream(arg2,(aoce::PushSetting const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveRoom_stopPushStream(void * jarg1, int jarg2) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->stopPushStream(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_pushVideoFrame(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  aoce::VideoFrame *arg3 = 0 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (aoce::VideoFrame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pushVideoFrame(arg2,(aoce::VideoFrame const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_pushAudioFrame(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  aoce::AudioFrame *arg3 = 0 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (aoce::AudioFrame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pushAudioFrame(arg2,(aoce::AudioFrame const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILiveRoom_pullStream(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::PullSetting *arg4 = 0 ;
  bool result;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::PullSetting *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PullSetting const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pullStream(arg2,arg3,(aoce::PullSetting const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveRoom_stopPullStream(void * jarg1, int jarg2, int jarg3) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->stopPullStream(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveRoom_logoutRoom(void * jarg1) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  (arg1)->logoutRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILiveRoom_shutdownRoom(void * jarg1) {
  aoce::ILiveRoom *arg1 = (aoce::ILiveRoom *) 0 ;
  
  arg1 = (aoce::ILiveRoom *)jarg1; 
  (arg1)->shutdownRoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec2_x_set(void * jarg1, float jarg2) {
  aoce::vec2 *arg1 = (aoce::vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec2_x_get(void * jarg1) {
  float jresult ;
  aoce::vec2 *arg1 = (aoce::vec2 *) 0 ;
  float result;
  
  arg1 = (aoce::vec2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec2_y_set(void * jarg1, float jarg2) {
  aoce::vec2 *arg1 = (aoce::vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec2_y_get(void * jarg1) {
  float jresult ;
  aoce::vec2 *arg1 = (aoce::vec2 *) 0 ;
  float result;
  
  arg1 = (aoce::vec2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2() {
  void * jresult ;
  aoce::vec2 *result = 0 ;
  
  result = (aoce::vec2 *)new aoce::vec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec2(void * jarg1) {
  aoce::vec2 *arg1 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::vec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_x_set(void * jarg1, float jarg2) {
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_x_get(void * jarg1) {
  float jresult ;
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float result;
  
  arg1 = (aoce::vec3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_y_set(void * jarg1, float jarg2) {
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_y_get(void * jarg1) {
  float jresult ;
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float result;
  
  arg1 = (aoce::vec3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_z_set(void * jarg1, float jarg2) {
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_z_get(void * jarg1) {
  float jresult ;
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  float result;
  
  arg1 = (aoce::vec3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3() {
  void * jresult ;
  aoce::vec3 *result = 0 ;
  
  result = (aoce::vec3 *)new aoce::vec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec3(void * jarg1) {
  aoce::vec3 *arg1 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::vec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_x_set(void * jarg1, float jarg2) {
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_x_get(void * jarg1) {
  float jresult ;
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float result;
  
  arg1 = (aoce::vec4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_y_set(void * jarg1, float jarg2) {
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_y_get(void * jarg1) {
  float jresult ;
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float result;
  
  arg1 = (aoce::vec4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_z_set(void * jarg1, float jarg2) {
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_z_get(void * jarg1) {
  float jresult ;
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float result;
  
  arg1 = (aoce::vec4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_w_set(void * jarg1, float jarg2) {
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_w_get(void * jarg1) {
  float jresult ;
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  float result;
  
  arg1 = (aoce::vec4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_0() {
  void * jresult ;
  aoce::vec4 *result = 0 ;
  
  result = (aoce::vec4 *)new aoce::vec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (aoce::vec4 *)new aoce::vec4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  aoce::vec3 arg1 ;
  float arg2 ;
  aoce::vec3 *argp1 ;
  aoce::vec4 *result = 0 ;
  
  argp1 = (aoce::vec3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::vec3", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  result = (aoce::vec4 *)new aoce::vec4(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec4(void * jarg1) {
  aoce::vec4 *arg1 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::vec4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat3x3_col0_set(void * jarg1, void * jarg2) {
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->col0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat3x3_col0_get(void * jarg1) {
  void * jresult ;
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->col0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat3x3_col1_set(void * jarg1, void * jarg2) {
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->col1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat3x3_col1_get(void * jarg1) {
  void * jresult ;
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->col1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat3x3_col2_set(void * jarg1, void * jarg2) {
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->col2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat3x3_col2_get(void * jarg1) {
  void * jresult ;
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->col2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mat3x3() {
  void * jresult ;
  aoce::Mat3x3 *result = 0 ;
  
  result = (aoce::Mat3x3 *)new aoce::Mat3x3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mat3x3(void * jarg1) {
  aoce::Mat3x3 *arg1 = (aoce::Mat3x3 *) 0 ;
  
  arg1 = (aoce::Mat3x3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat4x4_col0_set(void * jarg1, void * jarg2) {
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->col0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat4x4_col0_get(void * jarg1) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->col0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat4x4_col1_set(void * jarg1, void * jarg2) {
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->col1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat4x4_col1_get(void * jarg1) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->col1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat4x4_col2_set(void * jarg1, void * jarg2) {
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->col2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat4x4_col2_get(void * jarg1) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->col2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mat4x4_col3_set(void * jarg1, void * jarg2) {
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->col3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mat4x4_col3_get(void * jarg1) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->col3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mat4x4() {
  void * jresult ;
  aoce::Mat4x4 *result = 0 ;
  
  result = (aoce::Mat4x4 *)new aoce::Mat4x4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mat4x4(void * jarg1) {
  aoce::Mat4x4 *arg1 = (aoce::Mat4x4 *) 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_identMat(void * jarg1) {
  aoce::Mat4x4 *arg1 = 0 ;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 & type is null", 0);
    return ;
  } 
  aoce::identMat(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_matMult(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  aoce::Mat4x4 *arg2 = 0 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  arg2 = (aoce::Mat4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  result = aoce::matMult((aoce::Mat4x4 const &)*arg1,(aoce::Mat4x4 const &)*arg2);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_transformMat(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  aoce::vec3 *arg2 = 0 ;
  aoce::vec3 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  arg2 = (aoce::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec3 const & type is null", 0);
    return 0;
  } 
  result = aoce::transformMat((aoce::Mat4x4 const &)*arg1,(aoce::vec3 const &)*arg2);
  jresult = new aoce::vec3((const aoce::vec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scaleIdentMat(void * jarg1) {
  void * jresult ;
  aoce::vec3 *arg1 = 0 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec3 const & type is null", 0);
    return 0;
  } 
  result = aoce::scaleIdentMat((aoce::vec3 const &)*arg1);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_scaleMat(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  aoce::vec3 *arg2 = 0 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  arg2 = (aoce::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec3 const & type is null", 0);
    return 0;
  } 
  result = aoce::scaleMat((aoce::Mat4x4 const &)*arg1,(aoce::vec3 const &)*arg2);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_saturateMat(void * jarg1, float jarg2) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = aoce::saturateMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_xrotateMat(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = aoce::xrotateMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_yrotateMat(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = aoce::yrotateMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zrotateMat(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = aoce::zrotateMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zshearMat(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = aoce::zshearMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_huerotateMat(void * jarg1, float jarg2) {
  void * jresult ;
  aoce::Mat4x4 *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  aoce::Mat4x4 result;
  
  arg1 = (aoce::Mat4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat4x4 const & type is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = aoce::huerotateMat((aoce::Mat4x4 const &)*arg1,(float const &)*arg2);
  jresult = new aoce::Mat4x4((const aoce::Mat4x4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMediaPlayerObserver(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onPrepared(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->onPrepared();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onPreparedSwigExplicitIMediaPlayerObserver(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->aoce::IMediaPlayerObserver::onPrepared();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onError(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::PlayStatus arg2 ;
  int32_t arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::PlayStatus)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->onError(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onErrorSwigExplicitIMediaPlayerObserver(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::PlayStatus arg2 ;
  int32_t arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::PlayStatus)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->aoce::IMediaPlayerObserver::onError(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onVideoFrame(void * jarg1, void * jarg2) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::VideoFrame *arg2 = 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::VideoFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  (arg1)->onVideoFrame((aoce::VideoFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onVideoFrameSwigExplicitIMediaPlayerObserver(void * jarg1, void * jarg2) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::VideoFrame *arg2 = 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::VideoFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  (arg1)->aoce::IMediaPlayerObserver::onVideoFrame((aoce::VideoFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onAudioFrame(void * jarg1, void * jarg2) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::AudioFrame *arg2 = 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::AudioFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->onAudioFrame((aoce::AudioFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onAudioFrameSwigExplicitIMediaPlayerObserver(void * jarg1, void * jarg2) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  aoce::AudioFrame *arg2 = 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  arg2 = (aoce::AudioFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->aoce::IMediaPlayerObserver::onAudioFrame((aoce::AudioFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onStop(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->onStop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onStopSwigExplicitIMediaPlayerObserver(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->aoce::IMediaPlayerObserver::onStop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onComplate(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->onComplate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_onComplateSwigExplicitIMediaPlayerObserver(void * jarg1) {
  aoce::IMediaPlayerObserver *arg1 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayerObserver *)jarg1; 
  (arg1)->aoce::IMediaPlayerObserver::onComplate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IMediaPlayerObserver() {
  void * jresult ;
  aoce::IMediaPlayerObserver *result = 0 ;
  
  result = (aoce::IMediaPlayerObserver *)new SwigDirector_IMediaPlayerObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayerObserver_director_connect(void *objarg, SwigDirector_IMediaPlayerObserver::SWIG_Callback0_t callback0, SwigDirector_IMediaPlayerObserver::SWIG_Callback1_t callback1, SwigDirector_IMediaPlayerObserver::SWIG_Callback2_t callback2, SwigDirector_IMediaPlayerObserver::SWIG_Callback3_t callback3, SwigDirector_IMediaPlayerObserver::SWIG_Callback4_t callback4, SwigDirector_IMediaPlayerObserver::SWIG_Callback5_t callback5) {
  aoce::IMediaPlayerObserver *obj = (aoce::IMediaPlayerObserver *)objarg;
  SwigDirector_IMediaPlayerObserver *director = static_cast<SwigDirector_IMediaPlayerObserver *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMediaPlayer(void * jarg1) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_setObserver(void * jarg1, void * jarg2) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  aoce::IMediaPlayerObserver *arg2 = (aoce::IMediaPlayerObserver *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  arg2 = (aoce::IMediaPlayerObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_setDataSource(void * jarg1, char * jarg2) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setDataSource((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_prepare(void * jarg1, unsigned int jarg2) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->prepare(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMediaPlayer_getAudioStream(void * jarg1) {
  void * jresult ;
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  aoce::AudioStream *result = 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  result = (aoce::AudioStream *) &(arg1)->getAudioStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMediaPlayer_getVideoStream(void * jarg1) {
  void * jresult ;
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  aoce::VideoStream *result = 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  result = (aoce::VideoStream *) &(arg1)->getVideoStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_start(void * jarg1) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  (arg1)->start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_pause(void * jarg1) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_stop(void * jarg1) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMediaPlayer_release(void * jarg1) {
  aoce::IMediaPlayer *arg1 = (aoce::IMediaPlayer *) 0 ;
  
  arg1 = (aoce::IMediaPlayer *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFactory(void * jarg1) {
  aoce::MediaFactory *arg1 = (aoce::MediaFactory *) 0 ;
  
  arg1 = (aoce::MediaFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFactory_createPlay(void * jarg1) {
  void * jresult ;
  aoce::MediaFactory *arg1 = (aoce::MediaFactory *) 0 ;
  aoce::IMediaPlayer *result = 0 ;
  
  arg1 = (aoce::MediaFactory *)jarg1; 
  result = (aoce::IMediaPlayer *)(arg1)->createPlay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AOCE_VIDEO_MAX_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)(512);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVideoDeviceObserver(void * jarg1) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onDeviceHandle(void * jarg1, int jarg2, int jarg3) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoHandleId arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  arg2 = (aoce::VideoHandleId)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->onDeviceHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onDeviceHandleSwigExplicitIVideoDeviceObserver(void * jarg1, int jarg2, int jarg3) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoHandleId arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  arg2 = (aoce::VideoHandleId)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->aoce::IVideoDeviceObserver::onDeviceHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onVideoFrame(void * jarg1, void * jarg2) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoFrame arg2 ;
  aoce::VideoFrame *argp2 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  argp2 = (aoce::VideoFrame *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->onVideoFrame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onVideoFrameSwigExplicitIVideoDeviceObserver(void * jarg1, void * jarg2) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoFrame arg2 ;
  aoce::VideoFrame *argp2 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  argp2 = (aoce::VideoFrame *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->aoce::IVideoDeviceObserver::onVideoFrame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onDepthVideoFrame(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoFrame arg2 ;
  aoce::VideoFrame arg3 ;
  void *arg4 = (void *) 0 ;
  aoce::VideoFrame *argp2 ;
  aoce::VideoFrame *argp3 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  argp2 = (aoce::VideoFrame *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (aoce::VideoFrame *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (void *)jarg4; 
  (arg1)->onDepthVideoFrame(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_onDepthVideoFrameSwigExplicitIVideoDeviceObserver(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  aoce::IVideoDeviceObserver *arg1 = (aoce::IVideoDeviceObserver *) 0 ;
  aoce::VideoFrame arg2 ;
  aoce::VideoFrame arg3 ;
  void *arg4 = (void *) 0 ;
  aoce::VideoFrame *argp2 ;
  aoce::VideoFrame *argp3 ;
  
  arg1 = (aoce::IVideoDeviceObserver *)jarg1; 
  argp2 = (aoce::VideoFrame *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (aoce::VideoFrame *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null aoce::VideoFrame", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (void *)jarg4; 
  (arg1)->aoce::IVideoDeviceObserver::onDepthVideoFrame(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IVideoDeviceObserver() {
  void * jresult ;
  aoce::IVideoDeviceObserver *result = 0 ;
  
  result = (aoce::IVideoDeviceObserver *)new SwigDirector_IVideoDeviceObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDeviceObserver_director_connect(void *objarg, SwigDirector_IVideoDeviceObserver::SWIG_Callback0_t callback0, SwigDirector_IVideoDeviceObserver::SWIG_Callback1_t callback1, SwigDirector_IVideoDeviceObserver::SWIG_Callback2_t callback2) {
  aoce::IVideoDeviceObserver *obj = (aoce::IVideoDeviceObserver *)objarg;
  SwigDirector_IVideoDeviceObserver *director = static_cast<SwigDirector_IVideoDeviceObserver *>(obj);
  director->swig_connect_director(callback0, callback1, callback2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVideoDevice(void * jarg1) {
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDevice_setObserver(void * jarg1, void * jarg2) {
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  aoce::IVideoDeviceObserver *arg2 = (aoce::IVideoDeviceObserver *) 0 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (aoce::IVideoDeviceObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVideoDevice_getFormatCount(void * jarg1) {
  int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  int32_t result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (int32_t)(arg1)->getFormatCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVideoDevice_getFormat(void * jarg1, int jarg2) {
  void * jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  int32_t arg2 ;
  aoce::VideoFormat result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (arg1)->getFormat(arg2);
  jresult = new aoce::VideoFormat((const aoce::VideoFormat &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IVideoDevice_getName(void * jarg1) {
  char * jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IVideoDevice_getId(void * jarg1) {
  char * jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (char *)(arg1)->getId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVideoDevice_getSelectFormat(void * jarg1) {
  void * jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  aoce::VideoFormat result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (arg1)->getSelectFormat();
  jresult = new aoce::VideoFormat((const aoce::VideoFormat &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVideoDevice_back(void * jarg1) {
  unsigned int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  bool result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (bool)(arg1)->back();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVideoDevice_bDepth(void * jarg1) {
  unsigned int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  bool result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (bool)(arg1)->bDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVideoDevice_findFormatIndex__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (int32_t)(arg1)->findFormatIndex(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVideoDevice_findFormatIndex__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (int32_t)(arg1)->findFormatIndex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDevice_setFormat__SWIG_0(void * jarg1, int jarg2) {
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->setFormat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVideoDevice_setFormat__SWIG_1(void * jarg1, void * jarg2) {
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  aoce::VideoFormat *arg2 = 0 ;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  arg2 = (aoce::VideoFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFormat const & type is null", 0);
    return ;
  } 
  (arg1)->setFormat((aoce::VideoFormat const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVideoDevice_open(void * jarg1) {
  unsigned int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  bool result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVideoDevice_close(void * jarg1) {
  unsigned int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  bool result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (bool)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IVideoDevice_bOpen(void * jarg1) {
  unsigned int jresult ;
  aoce::IVideoDevice *arg1 = (aoce::IVideoDevice *) 0 ;
  bool result;
  
  arg1 = (aoce::IVideoDevice *)jarg1; 
  result = (bool)(arg1)->bOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVideoManager(void * jarg1) {
  aoce::IVideoManager *arg1 = (aoce::IVideoManager *) 0 ;
  
  arg1 = (aoce::IVideoManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVideoManager_getDeviceCount__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  aoce::IVideoManager *arg1 = (aoce::IVideoManager *) 0 ;
  bool arg2 ;
  int32_t result;
  
  arg1 = (aoce::IVideoManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int32_t)(arg1)->getDeviceCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVideoManager_getDeviceCount__SWIG_1(void * jarg1) {
  int jresult ;
  aoce::IVideoManager *arg1 = (aoce::IVideoManager *) 0 ;
  int32_t result;
  
  arg1 = (aoce::IVideoManager *)jarg1; 
  result = (int32_t)(arg1)->getDeviceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVideoManager_getDevice(void * jarg1, int jarg2) {
  void * jresult ;
  aoce::IVideoManager *arg1 = (aoce::IVideoManager *) 0 ;
  int32_t arg2 ;
  aoce::IVideoDevice *result = 0 ;
  
  arg1 = (aoce::IVideoManager *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (aoce::IVideoDevice *)(arg1)->getDevice(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBaseLayer(void * jarg1) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IBaseLayer_getMark(void * jarg1) {
  char * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  result = (char *)(arg1)->getMark();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseLayer_bAttachGraph(void * jarg1) {
  unsigned int jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  bool result;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  result = (bool)(arg1)->bAttachGraph();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setVisable(void * jarg1, unsigned int jarg2) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setEnable(void * jarg1, unsigned int jarg2) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnable(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseLayer_getGraphIndex(void * jarg1) {
  int jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  int32_t result;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  result = (int32_t)(arg1)->getGraphIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setStartNode__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->setStartNode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setStartNode__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->setStartNode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setStartNode__SWIG_2(void * jarg1, void * jarg2) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  (arg1)->setStartNode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseLayer_setEndNode(void * jarg1, void * jarg2) {
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  (arg1)->setEndNode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseLayer_addNode__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->addNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseLayer_addNode__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::ILayer *arg2 = (aoce::ILayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::ILayer *)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->addNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseLayer_addLine__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  int32_t arg3 ;
  int32_t arg4 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (aoce::IBaseLayer *)(arg1)->addLine(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseLayer_addLine__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  int32_t arg3 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (aoce::IBaseLayer *)(arg1)->addLine(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseLayer_addLine__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::IBaseLayer *arg1 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IBaseLayer *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->addLine(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILayer(void * jarg1) {
  aoce::ILayer *arg1 = (aoce::ILayer *) 0 ;
  
  arg1 = (aoce::ILayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILayer_getLayer(void * jarg1) {
  void * jresult ;
  aoce::ILayer *arg1 = (aoce::ILayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::ILayer *)jarg1; 
  result = (aoce::IBaseLayer *)(arg1)->getLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPipeGraph(void * jarg1) {
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPipeGraph_getGpuType(void * jarg1) {
  int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::GpuType result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  result = (aoce::GpuType)(arg1)->getGpuType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPipeGraph_reset(void * jarg1) {
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPipeGraph_getNode(void * jarg1, int jarg2) {
  void * jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->getNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPipeGraph_addNode__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->addNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPipeGraph_addNode__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::ILayer *arg2 = (aoce::ILayer *) 0 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (aoce::ILayer *)jarg2; 
  result = (aoce::IBaseLayer *)(arg1)->addNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  result = (bool)(arg1)->addLine(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (bool)(arg1)->addLine(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (bool)(arg1)->addLine(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg3 = (aoce::IBaseLayer *) 0 ;
  int32_t arg4 ;
  int32_t arg5 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (aoce::IBaseLayer *)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  result = (bool)(arg1)->addLine(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_4(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg3 = (aoce::IBaseLayer *) 0 ;
  int32_t arg4 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (aoce::IBaseLayer *)jarg3; 
  arg4 = (int32_t)jarg4; 
  result = (bool)(arg1)->addLine(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_addLine__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  aoce::IBaseLayer *arg2 = (aoce::IBaseLayer *) 0 ;
  aoce::IBaseLayer *arg3 = (aoce::IBaseLayer *) 0 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (aoce::IBaseLayer *)jarg2; 
  arg3 = (aoce::IBaseLayer *)jarg3; 
  result = (bool)(arg1)->addLine(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_getLayerOutFormat__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::ImageFormat *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::ImageFormat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->getLayerOutFormat(arg2,arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_getLayerOutFormat__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::ImageFormat *arg4 = 0 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::ImageFormat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getLayerOutFormat(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_getLayerInFormat(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  aoce::ImageFormat *arg4 = 0 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (aoce::ImageFormat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getLayerInFormat(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPipeGraph_clearLines(void * jarg1) {
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  (arg1)->clearLines();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPipeGraph_clear(void * jarg1) {
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPipeGraph_run(void * jarg1) {
  unsigned int jresult ;
  aoce::IPipeGraph *arg1 = (aoce::IPipeGraph *) 0 ;
  bool result;
  
  arg1 = (aoce::IPipeGraph *)jarg1; 
  result = (bool)(arg1)->run();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputParamet_bCpu_set(void * jarg1, int jarg2) {
  aoce::InputParamet *arg1 = (aoce::InputParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::InputParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bCpu = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputParamet_bCpu_get(void * jarg1) {
  int jresult ;
  aoce::InputParamet *arg1 = (aoce::InputParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::InputParamet *)jarg1; 
  result = (int32_t) ((arg1)->bCpu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputParamet_bGpu_set(void * jarg1, int jarg2) {
  aoce::InputParamet *arg1 = (aoce::InputParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::InputParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bGpu = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputParamet_bGpu_get(void * jarg1) {
  int jresult ;
  aoce::InputParamet *arg1 = (aoce::InputParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::InputParamet *)jarg1; 
  result = (int32_t) ((arg1)->bGpu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InputParamet() {
  void * jresult ;
  aoce::InputParamet *result = 0 ;
  
  result = (aoce::InputParamet *)new aoce::InputParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InputParamet(void * jarg1) {
  aoce::InputParamet *arg1 = (aoce::InputParamet *) 0 ;
  
  arg1 = (aoce::InputParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OutputParamet_bCpu_set(void * jarg1, int jarg2) {
  aoce::OutputParamet *arg1 = (aoce::OutputParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::OutputParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bCpu = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OutputParamet_bCpu_get(void * jarg1) {
  int jresult ;
  aoce::OutputParamet *arg1 = (aoce::OutputParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::OutputParamet *)jarg1; 
  result = (int32_t) ((arg1)->bCpu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OutputParamet_bGpu_set(void * jarg1, int jarg2) {
  aoce::OutputParamet *arg1 = (aoce::OutputParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::OutputParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->bGpu = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OutputParamet_bGpu_get(void * jarg1) {
  int jresult ;
  aoce::OutputParamet *arg1 = (aoce::OutputParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::OutputParamet *)jarg1; 
  result = (int32_t) ((arg1)->bGpu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OutputParamet() {
  void * jresult ;
  aoce::OutputParamet *result = 0 ;
  
  result = (aoce::OutputParamet *)new aoce::OutputParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OutputParamet(void * jarg1) {
  aoce::OutputParamet *arg1 = (aoce::OutputParamet *) 0 ;
  
  arg1 = (aoce::OutputParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLOutGpuTex_image_set(void * jarg1, int jarg2) {
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->image = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GLOutGpuTex_image_get(void * jarg1) {
  int jresult ;
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t result;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  result = (int32_t) ((arg1)->image);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLOutGpuTex_width_set(void * jarg1, int jarg2) {
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GLOutGpuTex_width_get(void * jarg1) {
  int jresult ;
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t result;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  result = (int32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLOutGpuTex_height_set(void * jarg1, int jarg2) {
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GLOutGpuTex_height_get(void * jarg1) {
  int jresult ;
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  int32_t result;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  result = (int32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GLOutGpuTex() {
  void * jresult ;
  aoce::GLOutGpuTex *result = 0 ;
  
  result = (aoce::GLOutGpuTex *)new aoce::GLOutGpuTex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GLOutGpuTex(void * jarg1) {
  aoce::GLOutGpuTex *arg1 = (aoce::GLOutGpuTex *) 0 ;
  
  arg1 = (aoce::GLOutGpuTex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOutputLayerObserver(void * jarg1) {
  aoce::IOutputLayerObserver *arg1 = (aoce::IOutputLayerObserver *) 0 ;
  
  arg1 = (aoce::IOutputLayerObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayerObserver_onImageProcess(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  aoce::IOutputLayerObserver *arg1 = (aoce::IOutputLayerObserver *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  aoce::ImageFormat *arg3 = 0 ;
  int32_t arg4 ;
  
  arg1 = (aoce::IOutputLayerObserver *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (aoce::ImageFormat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  (arg1)->onImageProcess(arg2,(aoce::ImageFormat const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayerObserver_onFormatChanged(void * jarg1, void * jarg2, int jarg3) {
  aoce::IOutputLayerObserver *arg1 = (aoce::IOutputLayerObserver *) 0 ;
  aoce::ImageFormat *arg2 = 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IOutputLayerObserver *)jarg1; 
  arg2 = (aoce::ImageFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  arg3 = (int32_t)jarg3; 
  (arg1)->onFormatChanged((aoce::ImageFormat const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayerObserver_onFormatChangedSwigExplicitIOutputLayerObserver(void * jarg1, void * jarg2, int jarg3) {
  aoce::IOutputLayerObserver *arg1 = (aoce::IOutputLayerObserver *) 0 ;
  aoce::ImageFormat *arg2 = 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IOutputLayerObserver *)jarg1; 
  arg2 = (aoce::ImageFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  arg3 = (int32_t)jarg3; 
  (arg1)->aoce::IOutputLayerObserver::onFormatChanged((aoce::ImageFormat const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IOutputLayerObserver() {
  void * jresult ;
  aoce::IOutputLayerObserver *result = 0 ;
  
  result = (aoce::IOutputLayerObserver *)new SwigDirector_IOutputLayerObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayerObserver_director_connect(void *objarg, SwigDirector_IOutputLayerObserver::SWIG_Callback0_t callback0, SwigDirector_IOutputLayerObserver::SWIG_Callback1_t callback1) {
  aoce::IOutputLayerObserver *obj = (aoce::IOutputLayerObserver *)objarg;
  SwigDirector_IOutputLayerObserver *director = static_cast<SwigDirector_IOutputLayerObserver *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PipeGraphFactory(void * jarg1) {
  aoce::PipeGraphFactory *arg1 = (aoce::PipeGraphFactory *) 0 ;
  
  arg1 = (aoce::PipeGraphFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PipeGraphFactory_createGraph(void * jarg1) {
  void * jresult ;
  aoce::PipeGraphFactory *arg1 = (aoce::PipeGraphFactory *) 0 ;
  aoce::IPipeGraph *result = 0 ;
  
  arg1 = (aoce::PipeGraphFactory *)jarg1; 
  result = (aoce::IPipeGraph *)(arg1)->createGraph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILMetadata(void * jarg1) {
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ILMetadata_getText(void * jarg1) {
  char * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (char *)(arg1)->getText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ILMetadata_getParametName(void * jarg1) {
  char * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (char *)(arg1)->getParametName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILMetadata_getLayerType(void * jarg1) {
  int jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::LayerMetadataType result;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::LayerMetadataType)(arg1)->getLayerType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILGroupMetadata(void * jarg1) {
  aoce::ILGroupMetadata *arg1 = (aoce::ILGroupMetadata *) 0 ;
  
  arg1 = (aoce::ILGroupMetadata *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILGroupMetadata_getCount(void * jarg1) {
  int jresult ;
  aoce::ILGroupMetadata *arg1 = (aoce::ILGroupMetadata *) 0 ;
  int32_t result;
  
  arg1 = (aoce::ILGroupMetadata *)jarg1; 
  result = (int32_t)(arg1)->getCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILGroupMetadata_getLMetadata(void * jarg1, int jarg2) {
  void * jresult ;
  aoce::ILGroupMetadata *arg1 = (aoce::ILGroupMetadata *) 0 ;
  int32_t arg2 ;
  aoce::ILMetadata *result = 0 ;
  
  arg1 = (aoce::ILGroupMetadata *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (aoce::ILMetadata *)(arg1)->getLMetadata(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ILGroupMetadata_getParametClass(void * jarg1) {
  char * jresult ;
  aoce::ILGroupMetadata *arg1 = (aoce::ILGroupMetadata *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::ILGroupMetadata *)jarg1; 
  result = (char *)(arg1)->getParametClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IWindow(void * jarg1) {
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  
  arg1 = (aoce::IWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IWindow_getTitle(void * jarg1) {
  char * jresult ;
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IWindow *)jarg1; 
  result = (char *)(arg1)->getTitle();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindow_getHwnd(void * jarg1) {
  void * jresult ;
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  void *result = 0 ;
  
  arg1 = (aoce::IWindow *)jarg1; 
  result = (void *)(arg1)->getHwnd();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IWindow_getProcessId(void * jarg1) {
  unsigned long long jresult ;
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  uint64_t result;
  
  arg1 = (aoce::IWindow *)jarg1; 
  result = (uint64_t)(arg1)->getProcessId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_IWindow_getMainThreadId(void * jarg1) {
  unsigned long long jresult ;
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  uint64_t result;
  
  arg1 = (aoce::IWindow *)jarg1; 
  result = (uint64_t)(arg1)->getMainThreadId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_bValid(void * jarg1) {
  unsigned int jresult ;
  aoce::IWindow *arg1 = (aoce::IWindow *) 0 ;
  bool result;
  
  arg1 = (aoce::IWindow *)jarg1; 
  result = (bool)(arg1)->bValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICaptureObserver(void * jarg1) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onEvent(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  aoce::CaptureEventId arg2 ;
  aoce::LogLevel arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (aoce::CaptureEventId)jarg2; 
  arg3 = (aoce::LogLevel)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->onEvent(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onEventSwigExplicitICaptureObserver(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  aoce::CaptureEventId arg2 ;
  aoce::LogLevel arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (aoce::CaptureEventId)jarg2; 
  arg3 = (aoce::LogLevel)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->aoce::ICaptureObserver::onEvent(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onResize(void * jarg1, int jarg2, int jarg3) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->onResize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onResizeSwigExplicitICaptureObserver(void * jarg1, int jarg2, int jarg3) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->aoce::ICaptureObserver::onResize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onCapture(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  aoce::VideoFormat *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (aoce::VideoFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFormat const & type is null", 0);
    return ;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->onCapture((aoce::VideoFormat const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_onCaptureSwigExplicitICaptureObserver(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  aoce::ICaptureObserver *arg1 = (aoce::ICaptureObserver *) 0 ;
  aoce::VideoFormat *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (aoce::ICaptureObserver *)jarg1; 
  arg2 = (aoce::VideoFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFormat const & type is null", 0);
    return ;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->aoce::ICaptureObserver::onCapture((aoce::VideoFormat const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ICaptureObserver() {
  void * jresult ;
  aoce::ICaptureObserver *result = 0 ;
  
  result = (aoce::ICaptureObserver *)new SwigDirector_ICaptureObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureObserver_director_connect(void *objarg, SwigDirector_ICaptureObserver::SWIG_Callback0_t callback0, SwigDirector_ICaptureObserver::SWIG_Callback1_t callback1, SwigDirector_ICaptureObserver::SWIG_Callback2_t callback2) {
  aoce::ICaptureObserver *obj = (aoce::ICaptureObserver *)objarg;
  SwigDirector_ICaptureObserver *director = static_cast<SwigDirector_ICaptureObserver *>(obj);
  director->swig_connect_director(callback0, callback1, callback2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICaptureWindow(void * jarg1) {
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureWindow_setObserver(void * jarg1, void * jarg2) {
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  aoce::ICaptureObserver *arg2 = (aoce::ICaptureObserver *) 0 ;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  arg2 = (aoce::ICaptureObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICaptureWindow_bCapturing(void * jarg1) {
  unsigned int jresult ;
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  bool result;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  result = (bool)(arg1)->bCapturing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICaptureWindow_startCapture(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  aoce::IWindow *arg2 = (aoce::IWindow *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  arg2 = (aoce::IWindow *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->startCapture(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICaptureWindow_renderCapture(void * jarg1) {
  unsigned int jresult ;
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  bool result;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  result = (bool)(arg1)->renderCapture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICaptureWindow_stopCapture(void * jarg1) {
  aoce::ICaptureWindow *arg1 = (aoce::ICaptureWindow *) 0 ;
  
  arg1 = (aoce::ICaptureWindow *)jarg1; 
  (arg1)->stopCapture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IWindowManager(void * jarg1) {
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IWindowManager_getWindowCount__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  bool arg2 ;
  int32_t result;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int32_t)(arg1)->getWindowCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IWindowManager_getWindowCount__SWIG_1(void * jarg1) {
  int jresult ;
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  int32_t result;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  result = (int32_t)(arg1)->getWindowCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindowManager_getWindow(void * jarg1, int jarg2) {
  void * jresult ;
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  int32_t arg2 ;
  aoce::IWindow *result = 0 ;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (aoce::IWindow *)(arg1)->getWindow(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindowManager_getDesktop(void * jarg1) {
  void * jresult ;
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  aoce::IWindow *result = 0 ;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  result = (aoce::IWindow *)(arg1)->getDesktop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowManager_setForeground(void * jarg1, void * jarg2) {
  aoce::IWindowManager *arg1 = (aoce::IWindowManager *) 0 ;
  aoce::IWindow *arg2 = (aoce::IWindow *) 0 ;
  
  arg1 = (aoce::IWindowManager *)jarg1; 
  arg2 = (aoce::IWindow *)jarg2; 
  (arg1)->setForeground(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFormat_channel_set(void * jarg1, int jarg2) {
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->channel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFormat_channel_get(void * jarg1) {
  int jresult ;
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  result = (int32_t) ((arg1)->channel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFormat_sampleRate_set(void * jarg1, int jarg2) {
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sampleRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFormat_sampleRate_get(void * jarg1) {
  int jresult ;
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  result = (int32_t) ((arg1)->sampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioFormat_depth_set(void * jarg1, int jarg2) {
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioFormat_depth_get(void * jarg1) {
  int jresult ;
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  result = (int32_t) ((arg1)->depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioFormat() {
  void * jresult ;
  aoce::AudioFormat *result = 0 ;
  
  result = (aoce::AudioFormat *)new aoce::AudioFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioFormat(void * jarg1) {
  aoce::AudioFormat *arg1 = (aoce::AudioFormat *) 0 ;
  
  arg1 = (aoce::AudioFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IAudioDeviceObserver() {
  void * jresult ;
  aoce::IAudioDeviceObserver *result = 0 ;
  
  result = (aoce::IAudioDeviceObserver *)new SwigDirector_IAudioDeviceObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAudioDeviceObserver(void * jarg1) {
  aoce::IAudioDeviceObserver *arg1 = (aoce::IAudioDeviceObserver *) 0 ;
  
  arg1 = (aoce::IAudioDeviceObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDeviceObserver_onDeviceHandle(void * jarg1, int jarg2, int jarg3) {
  aoce::IAudioDeviceObserver *arg1 = (aoce::IAudioDeviceObserver *) 0 ;
  aoce::VideoHandleId arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IAudioDeviceObserver *)jarg1; 
  arg2 = (aoce::VideoHandleId)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->onDeviceHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDeviceObserver_onDeviceHandleSwigExplicitIAudioDeviceObserver(void * jarg1, int jarg2, int jarg3) {
  aoce::IAudioDeviceObserver *arg1 = (aoce::IAudioDeviceObserver *) 0 ;
  aoce::VideoHandleId arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IAudioDeviceObserver *)jarg1; 
  arg2 = (aoce::VideoHandleId)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->aoce::IAudioDeviceObserver::onDeviceHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDeviceObserver_onAudioFrame(void * jarg1, void * jarg2) {
  aoce::IAudioDeviceObserver *arg1 = (aoce::IAudioDeviceObserver *) 0 ;
  aoce::AudioFrame *arg2 = 0 ;
  
  arg1 = (aoce::IAudioDeviceObserver *)jarg1; 
  arg2 = (aoce::AudioFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->onAudioFrame((aoce::AudioFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDeviceObserver_onAudioFrameSwigExplicitIAudioDeviceObserver(void * jarg1, void * jarg2) {
  aoce::IAudioDeviceObserver *arg1 = (aoce::IAudioDeviceObserver *) 0 ;
  aoce::AudioFrame *arg2 = 0 ;
  
  arg1 = (aoce::IAudioDeviceObserver *)jarg1; 
  arg2 = (aoce::AudioFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AudioFrame const & type is null", 0);
    return ;
  } 
  (arg1)->aoce::IAudioDeviceObserver::onAudioFrame((aoce::AudioFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDeviceObserver_director_connect(void *objarg, SwigDirector_IAudioDeviceObserver::SWIG_Callback0_t callback0, SwigDirector_IAudioDeviceObserver::SWIG_Callback1_t callback1) {
  aoce::IAudioDeviceObserver *obj = (aoce::IAudioDeviceObserver *)objarg;
  SwigDirector_IAudioDeviceObserver *director = static_cast<SwigDirector_IAudioDeviceObserver *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAudioDevice(void * jarg1) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAudioDevice_getDeviceType(void * jarg1) {
  int jresult ;
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  aoce::AudioDeviceType result;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  result = (aoce::AudioDeviceType)(arg1)->getDeviceType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAudioDevice_getName(void * jarg1) {
  char * jresult ;
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAudioDevice_getId(void * jarg1) {
  char * jresult ;
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  result = (char *)(arg1)->getId();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDevice_setObserver(void * jarg1, void * jarg2) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  aoce::IAudioDeviceObserver *arg2 = (aoce::IAudioDeviceObserver *) 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  arg2 = (aoce::IAudioDeviceObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDevice_prepare(void * jarg1, unsigned int jarg2) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  bool arg2 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->prepare(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAudioDevice_getAudioFormat(void * jarg1) {
  void * jresult ;
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  aoce::AudioFormat *result = 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  result = (aoce::AudioFormat *) &(arg1)->getAudioFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDevice_start(void * jarg1) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  (arg1)->start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDevice_stop(void * jarg1) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAudioDevice_release(void * jarg1) {
  aoce::IAudioDevice *arg1 = (aoce::IAudioDevice *) 0 ;
  
  arg1 = (aoce::IAudioDevice *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AInputLayer(void * jarg1) {
  aoce::ITLayer< aoce::InputParamet > *arg1 = (aoce::ITLayer< aoce::InputParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::InputParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AInputLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::InputParamet > *arg1 = (aoce::ITLayer< aoce::InputParamet > *) 0 ;
  aoce::InputParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::InputParamet > *)jarg1; 
  arg2 = (aoce::InputParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::InputParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::InputParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AInputLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::InputParamet > *arg1 = (aoce::ITLayer< aoce::InputParamet > *) 0 ;
  aoce::InputParamet result;
  
  arg1 = (aoce::ITLayer< aoce::InputParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::InputParamet((const aoce::InputParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AOutputLayer(void * jarg1) {
  aoce::ITLayer< aoce::OutputParamet > *arg1 = (aoce::ITLayer< aoce::OutputParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::OutputParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AOutputLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::OutputParamet > *arg1 = (aoce::ITLayer< aoce::OutputParamet > *) 0 ;
  aoce::OutputParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::OutputParamet > *)jarg1; 
  arg2 = (aoce::OutputParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::OutputParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::OutputParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AOutputLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::OutputParamet > *arg1 = (aoce::ITLayer< aoce::OutputParamet > *) 0 ;
  aoce::OutputParamet result;
  
  arg1 = (aoce::ITLayer< aoce::OutputParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::OutputParamet((const aoce::OutputParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IInputLayer(void * jarg1) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_setImage__SWIG_0(void * jarg1, void * jarg2) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  aoce::ImageFormat *arg2 = 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (aoce::ImageFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  (arg1)->setImage((aoce::ImageFormat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_setImage__SWIG_1(void * jarg1, void * jarg2) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  aoce::VideoFormat *arg2 = 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (aoce::VideoFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFormat const & type is null", 0);
    return ;
  } 
  (arg1)->setImage((aoce::VideoFormat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  bool arg3 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->inputCpuData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_1(void * jarg1, void * jarg2) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  (arg1)->inputCpuData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  aoce::VideoFrame *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (aoce::VideoFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->inputCpuData((aoce::VideoFrame const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_3(void * jarg1, void * jarg2) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  aoce::VideoFrame *arg2 = 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (aoce::VideoFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VideoFrame const & type is null", 0);
    return ;
  } 
  (arg1)->inputCpuData((aoce::VideoFrame const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  aoce::ImageFormat *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (aoce::ImageFormat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->inputCpuData(arg2,(aoce::ImageFormat const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputCpuData__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  aoce::ImageFormat *arg3 = 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (aoce::ImageFormat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ImageFormat const & type is null", 0);
    return ;
  } 
  (arg1)->inputCpuData(arg2,(aoce::ImageFormat const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IInputLayer_inputGpuData(void * jarg1, void * jarg2, void * jarg3) {
  aoce::IInputLayer *arg1 = (aoce::IInputLayer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (aoce::IInputLayer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->inputGpuData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOutputLayer(void * jarg1) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayer_setObserver(void * jarg1, void * jarg2) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  aoce::IOutputLayerObserver *arg2 = (aoce::IOutputLayerObserver *) 0 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  arg2 = (aoce::IOutputLayerObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayer_outDx11GpuTex(void * jarg1, void * jarg2, void * jarg3) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->outDx11GpuTex(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayer_outGLGpuTex__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  aoce::GLOutGpuTex *arg2 = 0 ;
  uint32_t arg3 ;
  int32_t arg4 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  arg2 = (aoce::GLOutGpuTex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::GLOutGpuTex const & type is null", 0);
    return ;
  } 
  arg3 = (uint32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->outGLGpuTex((aoce::GLOutGpuTex const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayer_outGLGpuTex__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  aoce::GLOutGpuTex *arg2 = 0 ;
  uint32_t arg3 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  arg2 = (aoce::GLOutGpuTex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::GLOutGpuTex const & type is null", 0);
    return ;
  } 
  arg3 = (uint32_t)jarg3; 
  (arg1)->outGLGpuTex((aoce::GLOutGpuTex const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOutputLayer_outGLGpuTex__SWIG_2(void * jarg1, void * jarg2) {
  aoce::IOutputLayer *arg1 = (aoce::IOutputLayer *) 0 ;
  aoce::GLOutGpuTex *arg2 = 0 ;
  
  arg1 = (aoce::IOutputLayer *)jarg1; 
  arg2 = (aoce::GLOutGpuTex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::GLOutGpuTex const & type is null", 0);
    return ;
  } 
  (arg1)->outGLGpuTex((aoce::GLOutGpuTex const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LayerFactory(void * jarg1) {
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createInput(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IInputLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IInputLayer *)(arg1)->createInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createOutput(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IOutputLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IOutputLayer *)(arg1)->createOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createYUV2RGBA(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IYUVLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IYUVLayer *)(arg1)->createYUV2RGBA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createRGBA2YUV(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IYUVLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IYUVLayer *)(arg1)->createRGBA2YUV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createMapChannel(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IMapChannelLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IMapChannelLayer *)(arg1)->createMapChannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createFlip(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IFlipLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IFlipLayer *)(arg1)->createFlip();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createTranspose(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::ITransposeLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::ITransposeLayer *)(arg1)->createTranspose();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createSize(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IReSizeLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IReSizeLayer *)(arg1)->createSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LayerFactory_createBlend(void * jarg1) {
  void * jresult ;
  aoce::LayerFactory *arg1 = (aoce::LayerFactory *) 0 ;
  aoce::IBlendLayer *result = 0 ;
  
  arg1 = (aoce::LayerFactory *)jarg1; 
  result = (aoce::IBlendLayer *)(arg1)->createBlend();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILogObserver(void * jarg1) {
  aoce::ILogObserver *arg1 = (aoce::ILogObserver *) 0 ;
  
  arg1 = (aoce::ILogObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogObserver_onLogEvent(void * jarg1, int jarg2, char * jarg3) {
  aoce::ILogObserver *arg1 = (aoce::ILogObserver *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (aoce::ILogObserver *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->onLogEvent(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ILogObserver() {
  void * jresult ;
  aoce::ILogObserver *result = 0 ;
  
  result = (aoce::ILogObserver *)new SwigDirector_ILogObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogObserver_director_connect(void *objarg, SwigDirector_ILogObserver::SWIG_Callback0_t callback0) {
  aoce::ILogObserver *obj = (aoce::ILogObserver *)objarg;
  SwigDirector_ILogObserver *director = static_cast<SwigDirector_ILogObserver *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_setLogObserver(void * jarg1) {
  aoce::ILogObserver *arg1 = (aoce::ILogObserver *) 0 ;
  
  arg1 = (aoce::ILogObserver *)jarg1; 
  aoce::setLogObserver(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_checkLoadModel(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)aoce::checkLoadModel((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getPipeGraphFactory(int jarg1) {
  void * jresult ;
  aoce::GpuType *arg1 = 0 ;
  aoce::GpuType temp1 ;
  aoce::PipeGraphFactory *result = 0 ;
  
  temp1 = (aoce::GpuType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::PipeGraphFactory *)aoce::getPipeGraphFactory((enum aoce::GpuType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLayerFactory(int jarg1) {
  void * jresult ;
  aoce::GpuType *arg1 = 0 ;
  aoce::GpuType temp1 ;
  aoce::LayerFactory *result = 0 ;
  
  temp1 = (aoce::GpuType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::LayerFactory *)aoce::getLayerFactory((enum aoce::GpuType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getVideoManager(int jarg1) {
  void * jresult ;
  aoce::CameraType *arg1 = 0 ;
  aoce::CameraType temp1 ;
  aoce::IVideoManager *result = 0 ;
  
  temp1 = (aoce::CameraType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::IVideoManager *)aoce::getVideoManager((enum aoce::CameraType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getMediaFactory(int jarg1) {
  void * jresult ;
  aoce::MediaType *arg1 = 0 ;
  aoce::MediaType temp1 ;
  aoce::MediaFactory *result = 0 ;
  
  temp1 = (aoce::MediaType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::MediaFactory *)aoce::getMediaFactory((enum aoce::MediaType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLiveRoom(int jarg1) {
  void * jresult ;
  aoce::LiveType *arg1 = 0 ;
  aoce::LiveType temp1 ;
  aoce::ILiveRoom *result = 0 ;
  
  temp1 = (aoce::LiveType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::ILiveRoom *)aoce::getLiveRoom((enum aoce::LiveType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getWindowManager(int jarg1) {
  void * jresult ;
  aoce::WindowType *arg1 = 0 ;
  aoce::WindowType temp1 ;
  aoce::IWindowManager *result = 0 ;
  
  temp1 = (aoce::WindowType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::IWindowManager *)aoce::getWindowManager((enum aoce::WindowType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getWindowCapture(int jarg1) {
  void * jresult ;
  aoce::CaptureType *arg1 = 0 ;
  aoce::CaptureType temp1 ;
  aoce::ICaptureWindow *result = 0 ;
  
  temp1 = (aoce::CaptureType)jarg1; 
  arg1 = &temp1; 
  result = (aoce::ICaptureWindow *)aoce::getWindowCapture((enum aoce::CaptureType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLayerMetadata(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  aoce::ILMetadata *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (aoce::ILMetadata *)aoce::getLayerMetadata((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLGroupMetadata(void * jarg1) {
  void * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::ILGroupMetadata *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::ILGroupMetadata *)aoce::getLGroupMetadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLBoolMetadata(void * jarg1) {
  void * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::ILBoolMetadata *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::ILBoolMetadata *)aoce::getLBoolMetadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLStringMetadata(void * jarg1) {
  void * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::ILStringMetadata *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::ILStringMetadata *)aoce::getLStringMetadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLIntMetadata(void * jarg1) {
  void * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::ILIntMetadata *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::ILIntMetadata *)aoce::getLIntMetadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getLFloatMetadata(void * jarg1) {
  void * jresult ;
  aoce::ILMetadata *arg1 = (aoce::ILMetadata *) 0 ;
  aoce::ILFloatMetadata *result = 0 ;
  
  arg1 = (aoce::ILMetadata *)jarg1; 
  result = (aoce::ILFloatMetadata *)aoce::getLFloatMetadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IYUVLayer(void * jarg1) {
  aoce::ITLayer< aoce::YUVParamet > *arg1 = (aoce::ITLayer< aoce::YUVParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::YUVParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IYUVLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::YUVParamet > *arg1 = (aoce::ITLayer< aoce::YUVParamet > *) 0 ;
  aoce::YUVParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::YUVParamet > *)jarg1; 
  arg2 = (aoce::YUVParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::YUVParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::YUVParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IYUVLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::YUVParamet > *arg1 = (aoce::ITLayer< aoce::YUVParamet > *) 0 ;
  aoce::YUVParamet result;
  
  arg1 = (aoce::ITLayer< aoce::YUVParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::YUVParamet((const aoce::YUVParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMapChannelLayer(void * jarg1) {
  aoce::ITLayer< aoce::MapChannelParamet > *arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMapChannelLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::MapChannelParamet > *arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *) 0 ;
  aoce::MapChannelParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *)jarg1; 
  arg2 = (aoce::MapChannelParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::MapChannelParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::MapChannelParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMapChannelLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::MapChannelParamet > *arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *) 0 ;
  aoce::MapChannelParamet result;
  
  arg1 = (aoce::ITLayer< aoce::MapChannelParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::MapChannelParamet((const aoce::MapChannelParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFlipLayer(void * jarg1) {
  aoce::ITLayer< aoce::FlipParamet > *arg1 = (aoce::ITLayer< aoce::FlipParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FlipParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFlipLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::FlipParamet > *arg1 = (aoce::ITLayer< aoce::FlipParamet > *) 0 ;
  aoce::FlipParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FlipParamet > *)jarg1; 
  arg2 = (aoce::FlipParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::FlipParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::FlipParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFlipLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::FlipParamet > *arg1 = (aoce::ITLayer< aoce::FlipParamet > *) 0 ;
  aoce::FlipParamet result;
  
  arg1 = (aoce::ITLayer< aoce::FlipParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::FlipParamet((const aoce::FlipParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITransposeLayer(void * jarg1) {
  aoce::ITLayer< aoce::TransposeParamet > *arg1 = (aoce::ITLayer< aoce::TransposeParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::TransposeParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITransposeLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::TransposeParamet > *arg1 = (aoce::ITLayer< aoce::TransposeParamet > *) 0 ;
  aoce::TransposeParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::TransposeParamet > *)jarg1; 
  arg2 = (aoce::TransposeParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::TransposeParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::TransposeParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITransposeLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::TransposeParamet > *arg1 = (aoce::ITLayer< aoce::TransposeParamet > *) 0 ;
  aoce::TransposeParamet result;
  
  arg1 = (aoce::ITLayer< aoce::TransposeParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::TransposeParamet((const aoce::TransposeParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IReSizeLayer(void * jarg1) {
  aoce::ITLayer< aoce::ReSizeParamet > *arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IReSizeLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ReSizeParamet > *arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *) 0 ;
  aoce::ReSizeParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *)jarg1; 
  arg2 = (aoce::ReSizeParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ReSizeParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ReSizeParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IReSizeLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ReSizeParamet > *arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *) 0 ;
  aoce::ReSizeParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ReSizeParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ReSizeParamet((const aoce::ReSizeParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBlendLayer(void * jarg1) {
  aoce::ITLayer< aoce::BlendParamet > *arg1 = (aoce::ITLayer< aoce::BlendParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlendParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBlendLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::BlendParamet > *arg1 = (aoce::ITLayer< aoce::BlendParamet > *) 0 ;
  aoce::BlendParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlendParamet > *)jarg1; 
  arg2 = (aoce::BlendParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::BlendParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::BlendParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBlendLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::BlendParamet > *arg1 = (aoce::ITLayer< aoce::BlendParamet > *) 0 ;
  aoce::BlendParamet result;
  
  arg1 = (aoce::ITLayer< aoce::BlendParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::BlendParamet((const aoce::BlendParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILBoolMetadata(void * jarg1) {
  aoce::ILTMetadata< bool > *arg1 = (aoce::ILTMetadata< bool > *) 0 ;
  
  arg1 = (aoce::ILTMetadata< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILBoolMetadata_getDefaultVaule(void * jarg1) {
  unsigned int jresult ;
  aoce::ILTMetadata< bool > *arg1 = (aoce::ILTMetadata< bool > *) 0 ;
  bool result;
  
  arg1 = (aoce::ILTMetadata< bool > *)jarg1; 
  result = (bool)(arg1)->getDefaultVaule();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILStringMetadata(void * jarg1) {
  aoce::ILTMetadata< char const * > *arg1 = (aoce::ILTMetadata< char const * > *) 0 ;
  
  arg1 = (aoce::ILTMetadata< char const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ILStringMetadata_getDefaultVaule(void * jarg1) {
  char * jresult ;
  aoce::ILTMetadata< char const * > *arg1 = (aoce::ILTMetadata< char const * > *) 0 ;
  char *result = 0 ;
  
  arg1 = (aoce::ILTMetadata< char const * > *)jarg1; 
  result = (char *)(arg1)->getDefaultVaule();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILIntMetadata(void * jarg1) {
  aoce::ILTRangeMetadata< int32_t > *arg1 = (aoce::ILTRangeMetadata< int32_t > *) 0 ;
  
  arg1 = (aoce::ILTRangeMetadata< int32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILIntMetadata_getMinValue(void * jarg1) {
  int jresult ;
  aoce::ILTRangeMetadata< int32_t > *arg1 = (aoce::ILTRangeMetadata< int32_t > *) 0 ;
  int result;
  
  arg1 = (aoce::ILTRangeMetadata< int32_t > *)jarg1; 
  result = (int)(arg1)->getMinValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILIntMetadata_getMaxValue(void * jarg1) {
  int jresult ;
  aoce::ILTRangeMetadata< int32_t > *arg1 = (aoce::ILTRangeMetadata< int32_t > *) 0 ;
  int result;
  
  arg1 = (aoce::ILTRangeMetadata< int32_t > *)jarg1; 
  result = (int)(arg1)->getMaxValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILFloatMetadata(void * jarg1) {
  aoce::ILTRangeMetadata< float > *arg1 = (aoce::ILTRangeMetadata< float > *) 0 ;
  
  arg1 = (aoce::ILTRangeMetadata< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ILFloatMetadata_getMinValue(void * jarg1) {
  float jresult ;
  aoce::ILTRangeMetadata< float > *arg1 = (aoce::ILTRangeMetadata< float > *) 0 ;
  float result;
  
  arg1 = (aoce::ILTRangeMetadata< float > *)jarg1; 
  result = (float)(arg1)->getMinValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ILFloatMetadata_getMaxValue(void * jarg1) {
  float jresult ;
  aoce::ILTRangeMetadata< float > *arg1 = (aoce::ILTRangeMetadata< float > *) 0 ;
  float result;
  
  arg1 = (aoce::ILTRangeMetadata< float > *)jarg1; 
  result = (float)(arg1)->getMaxValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ASoftEleganceLayer(void * jarg1) {
  aoce::ITLayer< aoce::SoftEleganceParamet > *arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ASoftEleganceLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SoftEleganceParamet > *arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *) 0 ;
  aoce::SoftEleganceParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *)jarg1; 
  arg2 = (aoce::SoftEleganceParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SoftEleganceParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SoftEleganceParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ASoftEleganceLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SoftEleganceParamet > *arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *) 0 ;
  aoce::SoftEleganceParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SoftEleganceParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SoftEleganceParamet((const aoce::SoftEleganceParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AFloatLayer(void * jarg1) {
  aoce::ITLayer< float > *arg1 = (aoce::ITLayer< float > *) 0 ;
  
  arg1 = (aoce::ITLayer< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AFloatLayer_updateParamet(void * jarg1, float jarg2) {
  aoce::ITLayer< float > *arg1 = (aoce::ITLayer< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (aoce::ITLayer< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateParamet((float const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AFloatLayer_getParamet(void * jarg1) {
  float jresult ;
  aoce::ITLayer< float > *arg1 = (aoce::ITLayer< float > *) 0 ;
  float result;
  
  arg1 = (aoce::ITLayer< float > *)jarg1; 
  result = (float)(arg1)->getParamet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_APerlinNoiseLayer(void * jarg1) {
  aoce::ITLayer< aoce::PerlinNoiseParamet > *arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_APerlinNoiseLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PerlinNoiseParamet > *arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *) 0 ;
  aoce::PerlinNoiseParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *)jarg1; 
  arg2 = (aoce::PerlinNoiseParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PerlinNoiseParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PerlinNoiseParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_APerlinNoiseLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PerlinNoiseParamet > *arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *) 0 ;
  aoce::PerlinNoiseParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PerlinNoiseParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PerlinNoiseParamet((const aoce::PerlinNoiseParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KernelSizeParamet_kernelSizeX_set(void * jarg1, int jarg2) {
  aoce::KernelSizeParamet *arg1 = (aoce::KernelSizeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::KernelSizeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->kernelSizeX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KernelSizeParamet_kernelSizeX_get(void * jarg1) {
  int jresult ;
  aoce::KernelSizeParamet *arg1 = (aoce::KernelSizeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::KernelSizeParamet *)jarg1; 
  result = (int32_t) ((arg1)->kernelSizeX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KernelSizeParamet_kernelSizeY_set(void * jarg1, int jarg2) {
  aoce::KernelSizeParamet *arg1 = (aoce::KernelSizeParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::KernelSizeParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->kernelSizeY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KernelSizeParamet_kernelSizeY_get(void * jarg1) {
  int jresult ;
  aoce::KernelSizeParamet *arg1 = (aoce::KernelSizeParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::KernelSizeParamet *)jarg1; 
  result = (int32_t) ((arg1)->kernelSizeY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KernelSizeParamet() {
  void * jresult ;
  aoce::KernelSizeParamet *result = 0 ;
  
  result = (aoce::KernelSizeParamet *)new aoce::KernelSizeParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KernelSizeParamet(void * jarg1) {
  aoce::KernelSizeParamet *arg1 = (aoce::KernelSizeParamet *) 0 ;
  
  arg1 = (aoce::KernelSizeParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GaussianBlurParamet_blurRadius_set(void * jarg1, int jarg2) {
  aoce::GaussianBlurParamet *arg1 = (aoce::GaussianBlurParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::GaussianBlurParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->blurRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GaussianBlurParamet_blurRadius_get(void * jarg1) {
  int jresult ;
  aoce::GaussianBlurParamet *arg1 = (aoce::GaussianBlurParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::GaussianBlurParamet *)jarg1; 
  result = (int32_t) ((arg1)->blurRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GaussianBlurParamet_sigma_set(void * jarg1, float jarg2) {
  aoce::GaussianBlurParamet *arg1 = (aoce::GaussianBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::GaussianBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sigma = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GaussianBlurParamet_sigma_get(void * jarg1) {
  float jresult ;
  aoce::GaussianBlurParamet *arg1 = (aoce::GaussianBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::GaussianBlurParamet *)jarg1; 
  result = (float) ((arg1)->sigma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GaussianBlurParamet() {
  void * jresult ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  result = (aoce::GaussianBlurParamet *)new aoce::GaussianBlurParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GaussianBlurParamet(void * jarg1) {
  aoce::GaussianBlurParamet *arg1 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::GaussianBlurParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_lumaMask_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lumaMask = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_lumaMask_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->lumaMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_chromaColor_set(void * jarg1, void * jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->chromaColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChromaKeyParamet_chromaColor_get(void * jarg1) {
  void * jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->chromaColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_ambientScale_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ambientScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_ambientScale_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->ambientScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_ambientColor_set(void * jarg1, void * jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->ambientColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChromaKeyParamet_ambientColor_get(void * jarg1) {
  void * jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->ambientColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_alphaCutoffMin_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alphaCutoffMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_alphaCutoffMin_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->alphaCutoffMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_alphaScale_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alphaScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_alphaScale_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->alphaScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_alphaExponent_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alphaExponent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_alphaExponent_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->alphaExponent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_despillScale_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->despillScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_despillScale_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->despillScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChromaKeyParamet_despillExponent_set(void * jarg1, float jarg2) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->despillExponent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ChromaKeyParamet_despillExponent_get(void * jarg1) {
  float jresult ;
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  result = (float) ((arg1)->despillExponent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChromaKeyParamet() {
  void * jresult ;
  aoce::ChromaKeyParamet *result = 0 ;
  
  result = (aoce::ChromaKeyParamet *)new aoce::ChromaKeyParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChromaKeyParamet(void * jarg1) {
  aoce::ChromaKeyParamet *arg1 = (aoce::ChromaKeyParamet *) 0 ;
  
  arg1 = (aoce::ChromaKeyParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AdaptiveThresholdParamet_boxSize_set(void * jarg1, int jarg2) {
  aoce::AdaptiveThresholdParamet *arg1 = (aoce::AdaptiveThresholdParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::AdaptiveThresholdParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->boxSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AdaptiveThresholdParamet_boxSize_get(void * jarg1) {
  int jresult ;
  aoce::AdaptiveThresholdParamet *arg1 = (aoce::AdaptiveThresholdParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::AdaptiveThresholdParamet *)jarg1; 
  result = (int32_t) ((arg1)->boxSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AdaptiveThresholdParamet_offset_set(void * jarg1, float jarg2) {
  aoce::AdaptiveThresholdParamet *arg1 = (aoce::AdaptiveThresholdParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::AdaptiveThresholdParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AdaptiveThresholdParamet_offset_get(void * jarg1) {
  float jresult ;
  aoce::AdaptiveThresholdParamet *arg1 = (aoce::AdaptiveThresholdParamet *) 0 ;
  float result;
  
  arg1 = (aoce::AdaptiveThresholdParamet *)jarg1; 
  result = (float) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AdaptiveThresholdParamet() {
  void * jresult ;
  aoce::AdaptiveThresholdParamet *result = 0 ;
  
  result = (aoce::AdaptiveThresholdParamet *)new aoce::AdaptiveThresholdParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AdaptiveThresholdParamet(void * jarg1) {
  aoce::AdaptiveThresholdParamet *arg1 = (aoce::AdaptiveThresholdParamet *) 0 ;
  
  arg1 = (aoce::AdaptiveThresholdParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuidedParamet_boxSize_set(void * jarg1, int jarg2) {
  aoce::GuidedParamet *arg1 = (aoce::GuidedParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::GuidedParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->boxSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GuidedParamet_boxSize_get(void * jarg1) {
  int jresult ;
  aoce::GuidedParamet *arg1 = (aoce::GuidedParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::GuidedParamet *)jarg1; 
  result = (int32_t) ((arg1)->boxSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuidedParamet_eps_set(void * jarg1, float jarg2) {
  aoce::GuidedParamet *arg1 = (aoce::GuidedParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::GuidedParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eps = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GuidedParamet_eps_get(void * jarg1) {
  float jresult ;
  aoce::GuidedParamet *arg1 = (aoce::GuidedParamet *) 0 ;
  float result;
  
  arg1 = (aoce::GuidedParamet *)jarg1; 
  result = (float) ((arg1)->eps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuidedParamet() {
  void * jresult ;
  aoce::GuidedParamet *result = 0 ;
  
  result = (aoce::GuidedParamet *)new aoce::GuidedParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GuidedParamet(void * jarg1) {
  aoce::GuidedParamet *arg1 = (aoce::GuidedParamet *) 0 ;
  
  arg1 = (aoce::GuidedParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuidedMattingParamet_guided_set(void * jarg1, void * jarg2) {
  aoce::GuidedMattingParamet *arg1 = (aoce::GuidedMattingParamet *) 0 ;
  aoce::GuidedParamet *arg2 = (aoce::GuidedParamet *) 0 ;
  
  arg1 = (aoce::GuidedMattingParamet *)jarg1; 
  arg2 = (aoce::GuidedParamet *)jarg2; 
  if (arg1) (arg1)->guided = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GuidedMattingParamet_guided_get(void * jarg1) {
  void * jresult ;
  aoce::GuidedMattingParamet *arg1 = (aoce::GuidedMattingParamet *) 0 ;
  aoce::GuidedParamet *result = 0 ;
  
  arg1 = (aoce::GuidedMattingParamet *)jarg1; 
  result = (aoce::GuidedParamet *)& ((arg1)->guided);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuidedMattingParamet() {
  void * jresult ;
  aoce::GuidedMattingParamet *result = 0 ;
  
  result = (aoce::GuidedMattingParamet *)new aoce::GuidedMattingParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GuidedMattingParamet(void * jarg1) {
  aoce::GuidedMattingParamet *arg1 = (aoce::GuidedMattingParamet *) 0 ;
  
  arg1 = (aoce::GuidedMattingParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_edgeStrength_set(void * jarg1, float jarg2) {
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->edgeStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_edgeStrength_get(void * jarg1) {
  float jresult ;
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  result = (float) ((arg1)->edgeStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_blueParamet_set(void * jarg1, void * jarg2) {
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blueParamet = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_blueParamet_get(void * jarg1) {
  void * jresult ;
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blueParamet);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_threshold_set(void * jarg1, float jarg2) {
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HarrisDetectionBaseParamet_threshold_get(void * jarg1) {
  float jresult ;
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  result = (float) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HarrisDetectionBaseParamet() {
  void * jresult ;
  aoce::HarrisDetectionBaseParamet *result = 0 ;
  
  result = (aoce::HarrisDetectionBaseParamet *)new aoce::HarrisDetectionBaseParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HarrisDetectionBaseParamet(void * jarg1) {
  aoce::HarrisDetectionBaseParamet *arg1 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  
  arg1 = (aoce::HarrisDetectionBaseParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_harrisBase_set(void * jarg1, void * jarg2) {
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  aoce::HarrisDetectionBaseParamet *arg2 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  arg2 = (aoce::HarrisDetectionBaseParamet *)jarg2; 
  if (arg1) (arg1)->harrisBase = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_harrisBase_get(void * jarg1) {
  void * jresult ;
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  aoce::HarrisDetectionBaseParamet *result = 0 ;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  result = (aoce::HarrisDetectionBaseParamet *)& ((arg1)->harrisBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_harris_set(void * jarg1, float jarg2) {
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->harris = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_harris_get(void * jarg1) {
  float jresult ;
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  result = (float) ((arg1)->harris);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_sensitivity_set(void * jarg1, float jarg2) {
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sensitivity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HarrisCornerDetectionParamet_sensitivity_get(void * jarg1) {
  float jresult ;
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  result = (float) ((arg1)->sensitivity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HarrisCornerDetectionParamet() {
  void * jresult ;
  aoce::HarrisCornerDetectionParamet *result = 0 ;
  
  result = (aoce::HarrisCornerDetectionParamet *)new aoce::HarrisCornerDetectionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HarrisCornerDetectionParamet(void * jarg1) {
  aoce::HarrisCornerDetectionParamet *arg1 = (aoce::HarrisCornerDetectionParamet *) 0 ;
  
  arg1 = (aoce::HarrisCornerDetectionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NobleCornerDetectionParamet_harrisBase_set(void * jarg1, void * jarg2) {
  aoce::NobleCornerDetectionParamet *arg1 = (aoce::NobleCornerDetectionParamet *) 0 ;
  aoce::HarrisDetectionBaseParamet *arg2 = (aoce::HarrisDetectionBaseParamet *) 0 ;
  
  arg1 = (aoce::NobleCornerDetectionParamet *)jarg1; 
  arg2 = (aoce::HarrisDetectionBaseParamet *)jarg2; 
  if (arg1) (arg1)->harrisBase = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NobleCornerDetectionParamet_harrisBase_get(void * jarg1) {
  void * jresult ;
  aoce::NobleCornerDetectionParamet *arg1 = (aoce::NobleCornerDetectionParamet *) 0 ;
  aoce::HarrisDetectionBaseParamet *result = 0 ;
  
  arg1 = (aoce::NobleCornerDetectionParamet *)jarg1; 
  result = (aoce::HarrisDetectionBaseParamet *)& ((arg1)->harrisBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NobleCornerDetectionParamet_sensitivity_set(void * jarg1, float jarg2) {
  aoce::NobleCornerDetectionParamet *arg1 = (aoce::NobleCornerDetectionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::NobleCornerDetectionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sensitivity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NobleCornerDetectionParamet_sensitivity_get(void * jarg1) {
  float jresult ;
  aoce::NobleCornerDetectionParamet *arg1 = (aoce::NobleCornerDetectionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::NobleCornerDetectionParamet *)jarg1; 
  result = (float) ((arg1)->sensitivity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NobleCornerDetectionParamet() {
  void * jresult ;
  aoce::NobleCornerDetectionParamet *result = 0 ;
  
  result = (aoce::NobleCornerDetectionParamet *)new aoce::NobleCornerDetectionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NobleCornerDetectionParamet(void * jarg1) {
  aoce::NobleCornerDetectionParamet *arg1 = (aoce::NobleCornerDetectionParamet *) 0 ;
  
  arg1 = (aoce::NobleCornerDetectionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_blueParamet_set(void * jarg1, void * jarg2) {
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blueParamet = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_blueParamet_get(void * jarg1) {
  void * jresult ;
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blueParamet);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_minThreshold_set(void * jarg1, float jarg2) {
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_minThreshold_get(void * jarg1) {
  float jresult ;
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  result = (float) ((arg1)->minThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_maxThreshold_set(void * jarg1, float jarg2) {
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CannyEdgeDetectionParamet_maxThreshold_get(void * jarg1) {
  float jresult ;
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  result = (float) ((arg1)->maxThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CannyEdgeDetectionParamet() {
  void * jresult ;
  aoce::CannyEdgeDetectionParamet *result = 0 ;
  
  result = (aoce::CannyEdgeDetectionParamet *)new aoce::CannyEdgeDetectionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CannyEdgeDetectionParamet(void * jarg1) {
  aoce::CannyEdgeDetectionParamet *arg1 = (aoce::CannyEdgeDetectionParamet *) 0 ;
  
  arg1 = (aoce::CannyEdgeDetectionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FASTFeatureParamet_boxSize_set(void * jarg1, int jarg2) {
  aoce::FASTFeatureParamet *arg1 = (aoce::FASTFeatureParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::FASTFeatureParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->boxSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FASTFeatureParamet_boxSize_get(void * jarg1) {
  int jresult ;
  aoce::FASTFeatureParamet *arg1 = (aoce::FASTFeatureParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::FASTFeatureParamet *)jarg1; 
  result = (int32_t) ((arg1)->boxSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FASTFeatureParamet_offset_set(void * jarg1, float jarg2) {
  aoce::FASTFeatureParamet *arg1 = (aoce::FASTFeatureParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::FASTFeatureParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FASTFeatureParamet_offset_get(void * jarg1) {
  float jresult ;
  aoce::FASTFeatureParamet *arg1 = (aoce::FASTFeatureParamet *) 0 ;
  float result;
  
  arg1 = (aoce::FASTFeatureParamet *)jarg1; 
  result = (float) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FASTFeatureParamet() {
  void * jresult ;
  aoce::FASTFeatureParamet *result = 0 ;
  
  result = (aoce::FASTFeatureParamet *)new aoce::FASTFeatureParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FASTFeatureParamet(void * jarg1) {
  aoce::FASTFeatureParamet *arg1 = (aoce::FASTFeatureParamet *) 0 ;
  
  arg1 = (aoce::FASTFeatureParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BilateralParamet_kernelSize_set(void * jarg1, int jarg2) {
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->kernelSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BilateralParamet_kernelSize_get(void * jarg1) {
  int jresult ;
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  result = (int32_t) ((arg1)->kernelSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BilateralParamet_sigma_spatial_set(void * jarg1, float jarg2) {
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sigma_spatial = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BilateralParamet_sigma_spatial_get(void * jarg1) {
  float jresult ;
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  result = (float) ((arg1)->sigma_spatial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BilateralParamet_sigma_color_set(void * jarg1, float jarg2) {
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sigma_color = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_BilateralParamet_sigma_color_get(void * jarg1) {
  float jresult ;
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  float result;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  result = (float) ((arg1)->sigma_color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BilateralParamet() {
  void * jresult ;
  aoce::BilateralParamet *result = 0 ;
  
  result = (aoce::BilateralParamet *)new aoce::BilateralParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BilateralParamet(void * jarg1) {
  aoce::BilateralParamet *arg1 = (aoce::BilateralParamet *) 0 ;
  
  arg1 = (aoce::BilateralParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DistortionParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DistortionParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DistortionParamet_center_set(void * jarg1, void * jarg2) {
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DistortionParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DistortionParamet_radius_set(void * jarg1, float jarg2) {
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DistortionParamet_radius_get(void * jarg1) {
  float jresult ;
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DistortionParamet_scale_set(void * jarg1, float jarg2) {
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DistortionParamet_scale_get(void * jarg1) {
  float jresult ;
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DistortionParamet() {
  void * jresult ;
  aoce::DistortionParamet *result = 0 ;
  
  result = (aoce::DistortionParamet *)new aoce::DistortionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DistortionParamet(void * jarg1) {
  aoce::DistortionParamet *arg1 = (aoce::DistortionParamet *) 0 ;
  
  arg1 = (aoce::DistortionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PositionParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionParamet_center_set(void * jarg1, void * jarg2) {
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionParamet_radius_set(void * jarg1, float jarg2) {
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PositionParamet_radius_get(void * jarg1) {
  float jresult ;
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionParamet() {
  void * jresult ;
  aoce::PositionParamet *result = 0 ;
  
  result = (aoce::PositionParamet *)new aoce::PositionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionParamet(void * jarg1) {
  aoce::PositionParamet *arg1 = (aoce::PositionParamet *) 0 ;
  
  arg1 = (aoce::PositionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectiveParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SelectiveParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectiveParamet_center_set(void * jarg1, void * jarg2) {
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SelectiveParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectiveParamet_radius_set(void * jarg1, float jarg2) {
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SelectiveParamet_radius_get(void * jarg1) {
  float jresult ;
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectiveParamet_size_set(void * jarg1, float jarg2) {
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SelectiveParamet_size_get(void * jarg1) {
  float jresult ;
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SelectiveParamet() {
  void * jresult ;
  aoce::SelectiveParamet *result = 0 ;
  
  result = (aoce::SelectiveParamet *)new aoce::SelectiveParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SelectiveParamet(void * jarg1) {
  aoce::SelectiveParamet *arg1 = (aoce::SelectiveParamet *) 0 ;
  
  arg1 = (aoce::SelectiveParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlurPositionParamet_gaussian_set(void * jarg1, void * jarg2) {
  aoce::BlurPositionParamet *arg1 = (aoce::BlurPositionParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::BlurPositionParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->gaussian = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlurPositionParamet_gaussian_get(void * jarg1) {
  void * jresult ;
  aoce::BlurPositionParamet *arg1 = (aoce::BlurPositionParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::BlurPositionParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->gaussian);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlurPositionParamet_blurPosition_set(void * jarg1, void * jarg2) {
  aoce::BlurPositionParamet *arg1 = (aoce::BlurPositionParamet *) 0 ;
  aoce::PositionParamet *arg2 = (aoce::PositionParamet *) 0 ;
  
  arg1 = (aoce::BlurPositionParamet *)jarg1; 
  arg2 = (aoce::PositionParamet *)jarg2; 
  if (arg1) (arg1)->blurPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlurPositionParamet_blurPosition_get(void * jarg1) {
  void * jresult ;
  aoce::BlurPositionParamet *arg1 = (aoce::BlurPositionParamet *) 0 ;
  aoce::PositionParamet *result = 0 ;
  
  arg1 = (aoce::BlurPositionParamet *)jarg1; 
  result = (aoce::PositionParamet *)& ((arg1)->blurPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BlurPositionParamet() {
  void * jresult ;
  aoce::BlurPositionParamet *result = 0 ;
  
  result = (aoce::BlurPositionParamet *)new aoce::BlurPositionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BlurPositionParamet(void * jarg1) {
  aoce::BlurPositionParamet *arg1 = (aoce::BlurPositionParamet *) 0 ;
  
  arg1 = (aoce::BlurPositionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlurSelectiveParamet_gaussian_set(void * jarg1, void * jarg2) {
  aoce::BlurSelectiveParamet *arg1 = (aoce::BlurSelectiveParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::BlurSelectiveParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->gaussian = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlurSelectiveParamet_gaussian_get(void * jarg1) {
  void * jresult ;
  aoce::BlurSelectiveParamet *arg1 = (aoce::BlurSelectiveParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::BlurSelectiveParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->gaussian);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlurSelectiveParamet_blurPosition_set(void * jarg1, void * jarg2) {
  aoce::BlurSelectiveParamet *arg1 = (aoce::BlurSelectiveParamet *) 0 ;
  aoce::SelectiveParamet *arg2 = (aoce::SelectiveParamet *) 0 ;
  
  arg1 = (aoce::BlurSelectiveParamet *)jarg1; 
  arg2 = (aoce::SelectiveParamet *)jarg2; 
  if (arg1) (arg1)->blurPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BlurSelectiveParamet_blurPosition_get(void * jarg1) {
  void * jresult ;
  aoce::BlurSelectiveParamet *arg1 = (aoce::BlurSelectiveParamet *) 0 ;
  aoce::SelectiveParamet *result = 0 ;
  
  arg1 = (aoce::BlurSelectiveParamet *)jarg1; 
  result = (aoce::SelectiveParamet *)& ((arg1)->blurPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BlurSelectiveParamet() {
  void * jresult ;
  aoce::BlurSelectiveParamet *result = 0 ;
  
  result = (aoce::BlurSelectiveParamet *)new aoce::BlurSelectiveParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BlurSelectiveParamet(void * jarg1) {
  aoce::BlurSelectiveParamet *arg1 = (aoce::BlurSelectiveParamet *) 0 ;
  
  arg1 = (aoce::BlurSelectiveParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereRefractionParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SphereRefractionParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereRefractionParamet_center_set(void * jarg1, void * jarg2) {
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SphereRefractionParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereRefractionParamet_radius_set(void * jarg1, float jarg2) {
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SphereRefractionParamet_radius_get(void * jarg1) {
  float jresult ;
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereRefractionParamet_refractiveIndex_set(void * jarg1, float jarg2) {
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->refractiveIndex = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SphereRefractionParamet_refractiveIndex_get(void * jarg1) {
  float jresult ;
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  result = (float) ((arg1)->refractiveIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SphereRefractionParamet() {
  void * jresult ;
  aoce::SphereRefractionParamet *result = 0 ;
  
  result = (aoce::SphereRefractionParamet *)new aoce::SphereRefractionParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SphereRefractionParamet(void * jarg1) {
  aoce::SphereRefractionParamet *arg1 = (aoce::SphereRefractionParamet *) 0 ;
  
  arg1 = (aoce::SphereRefractionParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixellateParamet_fractionalWidthOfPixel_set(void * jarg1, float jarg2) {
  aoce::PixellateParamet *arg1 = (aoce::PixellateParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PixellateParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fractionalWidthOfPixel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixellateParamet_fractionalWidthOfPixel_get(void * jarg1) {
  float jresult ;
  aoce::PixellateParamet *arg1 = (aoce::PixellateParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PixellateParamet *)jarg1; 
  result = (float) ((arg1)->fractionalWidthOfPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PixellateParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::PixellateParamet *arg1 = (aoce::PixellateParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PixellateParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PixellateParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::PixellateParamet *arg1 = (aoce::PixellateParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PixellateParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PixellateParamet() {
  void * jresult ;
  aoce::PixellateParamet *result = 0 ;
  
  result = (aoce::PixellateParamet *)new aoce::PixellateParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PixellateParamet(void * jarg1) {
  aoce::PixellateParamet *arg1 = (aoce::PixellateParamet *) 0 ;
  
  arg1 = (aoce::PixellateParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorMatrixParamet_intensity_set(void * jarg1, float jarg2) {
  aoce::ColorMatrixParamet *arg1 = (aoce::ColorMatrixParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ColorMatrixParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColorMatrixParamet_intensity_get(void * jarg1) {
  float jresult ;
  aoce::ColorMatrixParamet *arg1 = (aoce::ColorMatrixParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ColorMatrixParamet *)jarg1; 
  result = (float) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorMatrixParamet_mat_set(void * jarg1, void * jarg2) {
  aoce::ColorMatrixParamet *arg1 = (aoce::ColorMatrixParamet *) 0 ;
  aoce::Mat4x4 *arg2 = (aoce::Mat4x4 *) 0 ;
  
  arg1 = (aoce::ColorMatrixParamet *)jarg1; 
  arg2 = (aoce::Mat4x4 *)jarg2; 
  if (arg1) (arg1)->mat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorMatrixParamet_mat_get(void * jarg1) {
  void * jresult ;
  aoce::ColorMatrixParamet *arg1 = (aoce::ColorMatrixParamet *) 0 ;
  aoce::Mat4x4 *result = 0 ;
  
  arg1 = (aoce::ColorMatrixParamet *)jarg1; 
  result = (aoce::Mat4x4 *)& ((arg1)->mat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorMatrixParamet() {
  void * jresult ;
  aoce::ColorMatrixParamet *result = 0 ;
  
  result = (aoce::ColorMatrixParamet *)new aoce::ColorMatrixParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorMatrixParamet(void * jarg1) {
  aoce::ColorMatrixParamet *arg1 = (aoce::ColorMatrixParamet *) 0 ;
  
  arg1 = (aoce::ColorMatrixParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParamet_centerX_set(void * jarg1, float jarg2) {
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->centerX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CropParamet_centerX_get(void * jarg1) {
  float jresult ;
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  result = (float) ((arg1)->centerX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParamet_centerY_set(void * jarg1, float jarg2) {
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->centerY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CropParamet_centerY_get(void * jarg1) {
  float jresult ;
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  result = (float) ((arg1)->centerY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParamet_width_set(void * jarg1, float jarg2) {
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CropParamet_width_get(void * jarg1) {
  float jresult ;
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CropParamet_height_set(void * jarg1, float jarg2) {
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CropParamet_height_get(void * jarg1) {
  float jresult ;
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CropParamet() {
  void * jresult ;
  aoce::CropParamet *result = 0 ;
  
  result = (aoce::CropParamet *)new aoce::CropParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CropParamet(void * jarg1) {
  aoce::CropParamet *arg1 = (aoce::CropParamet *) 0 ;
  
  arg1 = (aoce::CropParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CrosshatchParamet_crossHatchSpacing_set(void * jarg1, float jarg2) {
  aoce::CrosshatchParamet *arg1 = (aoce::CrosshatchParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CrosshatchParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->crossHatchSpacing = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CrosshatchParamet_crossHatchSpacing_get(void * jarg1) {
  float jresult ;
  aoce::CrosshatchParamet *arg1 = (aoce::CrosshatchParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CrosshatchParamet *)jarg1; 
  result = (float) ((arg1)->crossHatchSpacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CrosshatchParamet_lineWidth_set(void * jarg1, float jarg2) {
  aoce::CrosshatchParamet *arg1 = (aoce::CrosshatchParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::CrosshatchParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lineWidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CrosshatchParamet_lineWidth_get(void * jarg1) {
  float jresult ;
  aoce::CrosshatchParamet *arg1 = (aoce::CrosshatchParamet *) 0 ;
  float result;
  
  arg1 = (aoce::CrosshatchParamet *)jarg1; 
  result = (float) ((arg1)->lineWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CrosshatchParamet() {
  void * jresult ;
  aoce::CrosshatchParamet *result = 0 ;
  
  result = (aoce::CrosshatchParamet *)new aoce::CrosshatchParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CrosshatchParamet(void * jarg1) {
  aoce::CrosshatchParamet *arg1 = (aoce::CrosshatchParamet *) 0 ;
  
  arg1 = (aoce::CrosshatchParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FalseColorParamet_firstColor_set(void * jarg1, void * jarg2) {
  aoce::FalseColorParamet *arg1 = (aoce::FalseColorParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::FalseColorParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->firstColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FalseColorParamet_firstColor_get(void * jarg1) {
  void * jresult ;
  aoce::FalseColorParamet *arg1 = (aoce::FalseColorParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::FalseColorParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->firstColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FalseColorParamet_secondColor_set(void * jarg1, void * jarg2) {
  aoce::FalseColorParamet *arg1 = (aoce::FalseColorParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::FalseColorParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->secondColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FalseColorParamet_secondColor_get(void * jarg1) {
  void * jresult ;
  aoce::FalseColorParamet *arg1 = (aoce::FalseColorParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::FalseColorParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->secondColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FalseColorParamet() {
  void * jresult ;
  aoce::FalseColorParamet *result = 0 ;
  
  result = (aoce::FalseColorParamet *)new aoce::FalseColorParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FalseColorParamet(void * jarg1) {
  aoce::FalseColorParamet *arg1 = (aoce::FalseColorParamet *) 0 ;
  
  arg1 = (aoce::FalseColorParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HazeParamet_distance_set(void * jarg1, float jarg2) {
  aoce::HazeParamet *arg1 = (aoce::HazeParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HazeParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HazeParamet_distance_get(void * jarg1) {
  float jresult ;
  aoce::HazeParamet *arg1 = (aoce::HazeParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HazeParamet *)jarg1; 
  result = (float) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HazeParamet_slope_set(void * jarg1, float jarg2) {
  aoce::HazeParamet *arg1 = (aoce::HazeParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HazeParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->slope = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HazeParamet_slope_get(void * jarg1) {
  float jresult ;
  aoce::HazeParamet *arg1 = (aoce::HazeParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HazeParamet *)jarg1; 
  result = (float) ((arg1)->slope);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HazeParamet() {
  void * jresult ;
  aoce::HazeParamet *result = 0 ;
  
  result = (aoce::HazeParamet *)new aoce::HazeParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HazeParamet(void * jarg1) {
  aoce::HazeParamet *arg1 = (aoce::HazeParamet *) 0 ;
  
  arg1 = (aoce::HazeParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowParamet_shadows_set(void * jarg1, float jarg2) {
  aoce::HighlightShadowParamet *arg1 = (aoce::HighlightShadowParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HighlightShadowParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shadows = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HighlightShadowParamet_shadows_get(void * jarg1) {
  float jresult ;
  aoce::HighlightShadowParamet *arg1 = (aoce::HighlightShadowParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HighlightShadowParamet *)jarg1; 
  result = (float) ((arg1)->shadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowParamet_highlights_set(void * jarg1, float jarg2) {
  aoce::HighlightShadowParamet *arg1 = (aoce::HighlightShadowParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HighlightShadowParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->highlights = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HighlightShadowParamet_highlights_get(void * jarg1) {
  float jresult ;
  aoce::HighlightShadowParamet *arg1 = (aoce::HighlightShadowParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HighlightShadowParamet *)jarg1; 
  result = (float) ((arg1)->highlights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HighlightShadowParamet() {
  void * jresult ;
  aoce::HighlightShadowParamet *result = 0 ;
  
  result = (aoce::HighlightShadowParamet *)new aoce::HighlightShadowParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HighlightShadowParamet(void * jarg1) {
  aoce::HighlightShadowParamet *arg1 = (aoce::HighlightShadowParamet *) 0 ;
  
  arg1 = (aoce::HighlightShadowParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowTintParamet_shadowTintIntensity_set(void * jarg1, float jarg2) {
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->shadowTintIntensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HighlightShadowTintParamet_shadowTintIntensity_get(void * jarg1) {
  float jresult ;
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  result = (float) ((arg1)->shadowTintIntensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowTintParamet_shadowTintColor_set(void * jarg1, void * jarg2) {
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->shadowTintColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HighlightShadowTintParamet_shadowTintColor_get(void * jarg1) {
  void * jresult ;
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->shadowTintColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowTintParamet_highlightTintIntensity_set(void * jarg1, float jarg2) {
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->highlightTintIntensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HighlightShadowTintParamet_highlightTintIntensity_get(void * jarg1) {
  float jresult ;
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  float result;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  result = (float) ((arg1)->highlightTintIntensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HighlightShadowTintParamet_highlightTintColor_set(void * jarg1, void * jarg2) {
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->highlightTintColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HighlightShadowTintParamet_highlightTintColor_get(void * jarg1) {
  void * jresult ;
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->highlightTintColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HighlightShadowTintParamet() {
  void * jresult ;
  aoce::HighlightShadowTintParamet *result = 0 ;
  
  result = (aoce::HighlightShadowTintParamet *)new aoce::HighlightShadowTintParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HighlightShadowTintParamet(void * jarg1) {
  aoce::HighlightShadowTintParamet *arg1 = (aoce::HighlightShadowTintParamet *) 0 ;
  
  arg1 = (aoce::HighlightShadowTintParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOSBlurParamet_sacle_set(void * jarg1, float jarg2) {
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sacle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IOSBlurParamet_sacle_get(void * jarg1) {
  float jresult ;
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  result = (float) ((arg1)->sacle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOSBlurParamet_blurParamet_set(void * jarg1, void * jarg2) {
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blurParamet = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IOSBlurParamet_blurParamet_get(void * jarg1) {
  void * jresult ;
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blurParamet);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOSBlurParamet_saturation_set(void * jarg1, float jarg2) {
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->saturation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IOSBlurParamet_saturation_get(void * jarg1) {
  float jresult ;
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  result = (float) ((arg1)->saturation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IOSBlurParamet_range_set(void * jarg1, float jarg2) {
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IOSBlurParamet_range_get(void * jarg1) {
  float jresult ;
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  result = (float) ((arg1)->range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IOSBlurParamet() {
  void * jresult ;
  aoce::IOSBlurParamet *result = 0 ;
  
  result = (aoce::IOSBlurParamet *)new aoce::IOSBlurParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IOSBlurParamet(void * jarg1) {
  aoce::IOSBlurParamet *arg1 = (aoce::IOSBlurParamet *) 0 ;
  
  arg1 = (aoce::IOSBlurParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LevelsParamet_minVec_set(void * jarg1, void * jarg2) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->minVec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LevelsParamet_minVec_get(void * jarg1) {
  void * jresult ;
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->minVec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LevelsParamet_gammaVec_set(void * jarg1, void * jarg2) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->gammaVec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LevelsParamet_gammaVec_get(void * jarg1) {
  void * jresult ;
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->gammaVec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LevelsParamet_maxVec_set(void * jarg1, void * jarg2) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->maxVec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LevelsParamet_maxVec_get(void * jarg1) {
  void * jresult ;
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->maxVec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LevelsParamet_minOut_set(void * jarg1, void * jarg2) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->minOut = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LevelsParamet_minOut_get(void * jarg1) {
  void * jresult ;
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->minOut);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LevelsParamet_maxOut_set(void * jarg1, void * jarg2) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->maxOut = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LevelsParamet_maxOut_get(void * jarg1) {
  void * jresult ;
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->maxOut);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LevelsParamet() {
  void * jresult ;
  aoce::LevelsParamet *result = 0 ;
  
  result = (aoce::LevelsParamet *)new aoce::LevelsParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LevelsParamet(void * jarg1) {
  aoce::LevelsParamet *arg1 = (aoce::LevelsParamet *) 0 ;
  
  arg1 = (aoce::LevelsParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonochromeParamet_intensity_set(void * jarg1, float jarg2) {
  aoce::MonochromeParamet *arg1 = (aoce::MonochromeParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::MonochromeParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MonochromeParamet_intensity_get(void * jarg1) {
  float jresult ;
  aoce::MonochromeParamet *arg1 = (aoce::MonochromeParamet *) 0 ;
  float result;
  
  arg1 = (aoce::MonochromeParamet *)jarg1; 
  result = (float) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MonochromeParamet_color_set(void * jarg1, void * jarg2) {
  aoce::MonochromeParamet *arg1 = (aoce::MonochromeParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::MonochromeParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MonochromeParamet_color_get(void * jarg1) {
  void * jresult ;
  aoce::MonochromeParamet *arg1 = (aoce::MonochromeParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::MonochromeParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MonochromeParamet() {
  void * jresult ;
  aoce::MonochromeParamet *result = 0 ;
  
  result = (aoce::MonochromeParamet *)new aoce::MonochromeParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MonochromeParamet(void * jarg1) {
  aoce::MonochromeParamet *arg1 = (aoce::MonochromeParamet *) 0 ;
  
  arg1 = (aoce::MonochromeParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotionBlurParamet_blurSize_set(void * jarg1, float jarg2) {
  aoce::MotionBlurParamet *arg1 = (aoce::MotionBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::MotionBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->blurSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MotionBlurParamet_blurSize_get(void * jarg1) {
  float jresult ;
  aoce::MotionBlurParamet *arg1 = (aoce::MotionBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::MotionBlurParamet *)jarg1; 
  result = (float) ((arg1)->blurSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MotionBlurParamet_blurAngle_set(void * jarg1, float jarg2) {
  aoce::MotionBlurParamet *arg1 = (aoce::MotionBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::MotionBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->blurAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MotionBlurParamet_blurAngle_get(void * jarg1) {
  float jresult ;
  aoce::MotionBlurParamet *arg1 = (aoce::MotionBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::MotionBlurParamet *)jarg1; 
  result = (float) ((arg1)->blurAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MotionBlurParamet() {
  void * jresult ;
  aoce::MotionBlurParamet *result = 0 ;
  
  result = (aoce::MotionBlurParamet *)new aoce::MotionBlurParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MotionBlurParamet(void * jarg1) {
  aoce::MotionBlurParamet *arg1 = (aoce::MotionBlurParamet *) 0 ;
  
  arg1 = (aoce::MotionBlurParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PoissonParamet_percent_set(void * jarg1, float jarg2) {
  aoce::PoissonParamet *arg1 = (aoce::PoissonParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PoissonParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->percent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PoissonParamet_percent_get(void * jarg1) {
  float jresult ;
  aoce::PoissonParamet *arg1 = (aoce::PoissonParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PoissonParamet *)jarg1; 
  result = (float) ((arg1)->percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PoissonParamet_iterationNum_set(void * jarg1, int jarg2) {
  aoce::PoissonParamet *arg1 = (aoce::PoissonParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::PoissonParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->iterationNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PoissonParamet_iterationNum_get(void * jarg1) {
  int jresult ;
  aoce::PoissonParamet *arg1 = (aoce::PoissonParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::PoissonParamet *)jarg1; 
  result = (int32_t) ((arg1)->iterationNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PoissonParamet() {
  void * jresult ;
  aoce::PoissonParamet *result = 0 ;
  
  result = (aoce::PoissonParamet *)new aoce::PoissonParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PoissonParamet(void * jarg1) {
  aoce::PoissonParamet *arg1 = (aoce::PoissonParamet *) 0 ;
  
  arg1 = (aoce::PoissonParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerlinNoiseParamet_scale_set(void * jarg1, float jarg2) {
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PerlinNoiseParamet_scale_get(void * jarg1) {
  float jresult ;
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerlinNoiseParamet_colorStart_set(void * jarg1, void * jarg2) {
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->colorStart = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerlinNoiseParamet_colorStart_get(void * jarg1) {
  void * jresult ;
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->colorStart);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PerlinNoiseParamet_colorFinish_set(void * jarg1, void * jarg2) {
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  aoce::vec4 *arg2 = (aoce::vec4 *) 0 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2; 
  if (arg1) (arg1)->colorFinish = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PerlinNoiseParamet_colorFinish_get(void * jarg1) {
  void * jresult ;
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  aoce::vec4 *result = 0 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  result = (aoce::vec4 *)& ((arg1)->colorFinish);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PerlinNoiseParamet() {
  void * jresult ;
  aoce::PerlinNoiseParamet *result = 0 ;
  
  result = (aoce::PerlinNoiseParamet *)new aoce::PerlinNoiseParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PerlinNoiseParamet(void * jarg1) {
  aoce::PerlinNoiseParamet *arg1 = (aoce::PerlinNoiseParamet *) 0 ;
  
  arg1 = (aoce::PerlinNoiseParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolarPixellateParamet_center_set(void * jarg1, void * jarg2) {
  aoce::PolarPixellateParamet *arg1 = (aoce::PolarPixellateParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::PolarPixellateParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolarPixellateParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::PolarPixellateParamet *arg1 = (aoce::PolarPixellateParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::PolarPixellateParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolarPixellateParamet_size_set(void * jarg1, void * jarg2) {
  aoce::PolarPixellateParamet *arg1 = (aoce::PolarPixellateParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::PolarPixellateParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolarPixellateParamet_size_get(void * jarg1) {
  void * jresult ;
  aoce::PolarPixellateParamet *arg1 = (aoce::PolarPixellateParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::PolarPixellateParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolarPixellateParamet() {
  void * jresult ;
  aoce::PolarPixellateParamet *result = 0 ;
  
  result = (aoce::PolarPixellateParamet *)new aoce::PolarPixellateParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolarPixellateParamet(void * jarg1) {
  aoce::PolarPixellateParamet *arg1 = (aoce::PolarPixellateParamet *) 0 ;
  
  arg1 = (aoce::PolarPixellateParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolkaDotParamet_dotScaling_set(void * jarg1, float jarg2) {
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dotScaling = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolkaDotParamet_dotScaling_get(void * jarg1) {
  float jresult ;
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  result = (float) ((arg1)->dotScaling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolkaDotParamet_fractionalWidthOfPixel_set(void * jarg1, float jarg2) {
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fractionalWidthOfPixel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolkaDotParamet_fractionalWidthOfPixel_get(void * jarg1) {
  float jresult ;
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  result = (float) ((arg1)->fractionalWidthOfPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolkaDotParamet_aspectRatio_set(void * jarg1, float jarg2) {
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolkaDotParamet_aspectRatio_get(void * jarg1) {
  float jresult ;
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  float result;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolkaDotParamet() {
  void * jresult ;
  aoce::PolkaDotParamet *result = 0 ;
  
  result = (aoce::PolkaDotParamet *)new aoce::PolkaDotParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolkaDotParamet(void * jarg1) {
  aoce::PolkaDotParamet *arg1 = (aoce::PolkaDotParamet *) 0 ;
  
  arg1 = (aoce::PolkaDotParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenParamet_offset_set(void * jarg1, int jarg2) {
  aoce::SharpenParamet *arg1 = (aoce::SharpenParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::SharpenParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharpenParamet_offset_get(void * jarg1) {
  int jresult ;
  aoce::SharpenParamet *arg1 = (aoce::SharpenParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::SharpenParamet *)jarg1; 
  result = (int32_t) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharpenParamet_sharpness_set(void * jarg1, float jarg2) {
  aoce::SharpenParamet *arg1 = (aoce::SharpenParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SharpenParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sharpness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SharpenParamet_sharpness_get(void * jarg1) {
  float jresult ;
  aoce::SharpenParamet *arg1 = (aoce::SharpenParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SharpenParamet *)jarg1; 
  result = (float) ((arg1)->sharpness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharpenParamet() {
  void * jresult ;
  aoce::SharpenParamet *result = 0 ;
  
  result = (aoce::SharpenParamet *)new aoce::SharpenParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharpenParamet(void * jarg1) {
  aoce::SharpenParamet *arg1 = (aoce::SharpenParamet *) 0 ;
  
  arg1 = (aoce::SharpenParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_skinToneAdjust_set(void * jarg1, float jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->skinToneAdjust = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SkinToneParamet_skinToneAdjust_get(void * jarg1) {
  float jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (float) ((arg1)->skinToneAdjust);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_skinHue_set(void * jarg1, float jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->skinHue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SkinToneParamet_skinHue_get(void * jarg1) {
  float jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (float) ((arg1)->skinHue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_skinHueThreshold_set(void * jarg1, float jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->skinHueThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SkinToneParamet_skinHueThreshold_get(void * jarg1) {
  float jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (float) ((arg1)->skinHueThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_maxHueShift_set(void * jarg1, float jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxHueShift = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SkinToneParamet_maxHueShift_get(void * jarg1) {
  float jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (float) ((arg1)->maxHueShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_maxSaturationShift_set(void * jarg1, float jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxSaturationShift = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SkinToneParamet_maxSaturationShift_get(void * jarg1) {
  float jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (float) ((arg1)->maxSaturationShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkinToneParamet_upperSkinToneColor_set(void * jarg1, int jarg2) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  int32_t arg2 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->upperSkinToneColor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SkinToneParamet_upperSkinToneColor_get(void * jarg1) {
  int jresult ;
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  int32_t result;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  result = (int32_t) ((arg1)->upperSkinToneColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SkinToneParamet() {
  void * jresult ;
  aoce::SkinToneParamet *result = 0 ;
  
  result = (aoce::SkinToneParamet *)new aoce::SkinToneParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SkinToneParamet(void * jarg1) {
  aoce::SkinToneParamet *arg1 = (aoce::SkinToneParamet *) 0 ;
  
  arg1 = (aoce::SkinToneParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToonParamet_threshold_set(void * jarg1, float jarg2) {
  aoce::ToonParamet *arg1 = (aoce::ToonParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ToonParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ToonParamet_threshold_get(void * jarg1) {
  float jresult ;
  aoce::ToonParamet *arg1 = (aoce::ToonParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ToonParamet *)jarg1; 
  result = (float) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToonParamet_quantizationLevels_set(void * jarg1, float jarg2) {
  aoce::ToonParamet *arg1 = (aoce::ToonParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ToonParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->quantizationLevels = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ToonParamet_quantizationLevels_get(void * jarg1) {
  float jresult ;
  aoce::ToonParamet *arg1 = (aoce::ToonParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ToonParamet *)jarg1; 
  result = (float) ((arg1)->quantizationLevels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToonParamet() {
  void * jresult ;
  aoce::ToonParamet *result = 0 ;
  
  result = (aoce::ToonParamet *)new aoce::ToonParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToonParamet(void * jarg1) {
  aoce::ToonParamet *arg1 = (aoce::ToonParamet *) 0 ;
  
  arg1 = (aoce::ToonParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SmoothToonParamet_blur_set(void * jarg1, void * jarg2) {
  aoce::SmoothToonParamet *arg1 = (aoce::SmoothToonParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::SmoothToonParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blur = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SmoothToonParamet_blur_get(void * jarg1) {
  void * jresult ;
  aoce::SmoothToonParamet *arg1 = (aoce::SmoothToonParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::SmoothToonParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blur);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SmoothToonParamet_toon_set(void * jarg1, void * jarg2) {
  aoce::SmoothToonParamet *arg1 = (aoce::SmoothToonParamet *) 0 ;
  aoce::ToonParamet *arg2 = (aoce::ToonParamet *) 0 ;
  
  arg1 = (aoce::SmoothToonParamet *)jarg1; 
  arg2 = (aoce::ToonParamet *)jarg2; 
  if (arg1) (arg1)->toon = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SmoothToonParamet_toon_get(void * jarg1) {
  void * jresult ;
  aoce::SmoothToonParamet *arg1 = (aoce::SmoothToonParamet *) 0 ;
  aoce::ToonParamet *result = 0 ;
  
  arg1 = (aoce::SmoothToonParamet *)jarg1; 
  result = (aoce::ToonParamet *)& ((arg1)->toon);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SmoothToonParamet() {
  void * jresult ;
  aoce::SmoothToonParamet *result = 0 ;
  
  result = (aoce::SmoothToonParamet *)new aoce::SmoothToonParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SmoothToonParamet(void * jarg1) {
  aoce::SmoothToonParamet *arg1 = (aoce::SmoothToonParamet *) 0 ;
  
  arg1 = (aoce::SmoothToonParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftEleganceParamet_blur_set(void * jarg1, void * jarg2) {
  aoce::SoftEleganceParamet *arg1 = (aoce::SoftEleganceParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::SoftEleganceParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blur = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftEleganceParamet_blur_get(void * jarg1) {
  void * jresult ;
  aoce::SoftEleganceParamet *arg1 = (aoce::SoftEleganceParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::SoftEleganceParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blur);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftEleganceParamet_mix_set(void * jarg1, float jarg2) {
  aoce::SoftEleganceParamet *arg1 = (aoce::SoftEleganceParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SoftEleganceParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mix = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftEleganceParamet_mix_get(void * jarg1) {
  float jresult ;
  aoce::SoftEleganceParamet *arg1 = (aoce::SoftEleganceParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SoftEleganceParamet *)jarg1; 
  result = (float) ((arg1)->mix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftEleganceParamet() {
  void * jresult ;
  aoce::SoftEleganceParamet *result = 0 ;
  
  result = (aoce::SoftEleganceParamet *)new aoce::SoftEleganceParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftEleganceParamet(void * jarg1) {
  aoce::SoftEleganceParamet *arg1 = (aoce::SoftEleganceParamet *) 0 ;
  
  arg1 = (aoce::SoftEleganceParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwirlParamet_center_set(void * jarg1, void * jarg2) {
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SwirlParamet_center_get(void * jarg1) {
  void * jresult ;
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwirlParamet_radius_set(void * jarg1, float jarg2) {
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SwirlParamet_radius_get(void * jarg1) {
  float jresult ;
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SwirlParamet_angle_set(void * jarg1, float jarg2) {
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SwirlParamet_angle_get(void * jarg1) {
  float jresult ;
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  float result;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  result = (float) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SwirlParamet() {
  void * jresult ;
  aoce::SwirlParamet *result = 0 ;
  
  result = (aoce::SwirlParamet *)new aoce::SwirlParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SwirlParamet(void * jarg1) {
  aoce::SwirlParamet *arg1 = (aoce::SwirlParamet *) 0 ;
  
  arg1 = (aoce::SwirlParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThresholdSobelParamet_edgeStrength_set(void * jarg1, float jarg2) {
  aoce::ThresholdSobelParamet *arg1 = (aoce::ThresholdSobelParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ThresholdSobelParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->edgeStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ThresholdSobelParamet_edgeStrength_get(void * jarg1) {
  float jresult ;
  aoce::ThresholdSobelParamet *arg1 = (aoce::ThresholdSobelParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ThresholdSobelParamet *)jarg1; 
  result = (float) ((arg1)->edgeStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThresholdSobelParamet_threshold_set(void * jarg1, float jarg2) {
  aoce::ThresholdSobelParamet *arg1 = (aoce::ThresholdSobelParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ThresholdSobelParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ThresholdSobelParamet_threshold_get(void * jarg1) {
  float jresult ;
  aoce::ThresholdSobelParamet *arg1 = (aoce::ThresholdSobelParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ThresholdSobelParamet *)jarg1; 
  result = (float) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThresholdSobelParamet() {
  void * jresult ;
  aoce::ThresholdSobelParamet *result = 0 ;
  
  result = (aoce::ThresholdSobelParamet *)new aoce::ThresholdSobelParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ThresholdSobelParamet(void * jarg1) {
  aoce::ThresholdSobelParamet *arg1 = (aoce::ThresholdSobelParamet *) 0 ;
  
  arg1 = (aoce::ThresholdSobelParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TiltShiftParamet_blur_set(void * jarg1, void * jarg2) {
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blur = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TiltShiftParamet_blur_get(void * jarg1) {
  void * jresult ;
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blur);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TiltShiftParamet_topFocusLevel_set(void * jarg1, float jarg2) {
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->topFocusLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TiltShiftParamet_topFocusLevel_get(void * jarg1) {
  float jresult ;
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float result;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  result = (float) ((arg1)->topFocusLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TiltShiftParamet_bottomFocusLevel_set(void * jarg1, float jarg2) {
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bottomFocusLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TiltShiftParamet_bottomFocusLevel_get(void * jarg1) {
  float jresult ;
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float result;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  result = (float) ((arg1)->bottomFocusLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TiltShiftParamet_focusFallOffRate_set(void * jarg1, float jarg2) {
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->focusFallOffRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TiltShiftParamet_focusFallOffRate_get(void * jarg1) {
  float jresult ;
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  float result;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  result = (float) ((arg1)->focusFallOffRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TiltShiftParamet() {
  void * jresult ;
  aoce::TiltShiftParamet *result = 0 ;
  
  result = (aoce::TiltShiftParamet *)new aoce::TiltShiftParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TiltShiftParamet(void * jarg1) {
  aoce::TiltShiftParamet *arg1 = (aoce::TiltShiftParamet *) 0 ;
  
  arg1 = (aoce::TiltShiftParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnsharpMaskParamet_blur_set(void * jarg1, void * jarg2) {
  aoce::UnsharpMaskParamet *arg1 = (aoce::UnsharpMaskParamet *) 0 ;
  aoce::GaussianBlurParamet *arg2 = (aoce::GaussianBlurParamet *) 0 ;
  
  arg1 = (aoce::UnsharpMaskParamet *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2; 
  if (arg1) (arg1)->blur = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnsharpMaskParamet_blur_get(void * jarg1) {
  void * jresult ;
  aoce::UnsharpMaskParamet *arg1 = (aoce::UnsharpMaskParamet *) 0 ;
  aoce::GaussianBlurParamet *result = 0 ;
  
  arg1 = (aoce::UnsharpMaskParamet *)jarg1; 
  result = (aoce::GaussianBlurParamet *)& ((arg1)->blur);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnsharpMaskParamet_intensity_set(void * jarg1, float jarg2) {
  aoce::UnsharpMaskParamet *arg1 = (aoce::UnsharpMaskParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::UnsharpMaskParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_UnsharpMaskParamet_intensity_get(void * jarg1) {
  float jresult ;
  aoce::UnsharpMaskParamet *arg1 = (aoce::UnsharpMaskParamet *) 0 ;
  float result;
  
  arg1 = (aoce::UnsharpMaskParamet *)jarg1; 
  result = (float) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnsharpMaskParamet() {
  void * jresult ;
  aoce::UnsharpMaskParamet *result = 0 ;
  
  result = (aoce::UnsharpMaskParamet *)new aoce::UnsharpMaskParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnsharpMaskParamet(void * jarg1) {
  aoce::UnsharpMaskParamet *arg1 = (aoce::UnsharpMaskParamet *) 0 ;
  
  arg1 = (aoce::UnsharpMaskParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignetteParamet_vignetteCenter_set(void * jarg1, void * jarg2) {
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->vignetteCenter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VignetteParamet_vignetteCenter_get(void * jarg1) {
  void * jresult ;
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->vignetteCenter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignetteParamet_vignetteColor_set(void * jarg1, void * jarg2) {
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  aoce::vec3 *arg2 = (aoce::vec3 *) 0 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2; 
  if (arg1) (arg1)->vignetteColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VignetteParamet_vignetteColor_get(void * jarg1) {
  void * jresult ;
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  aoce::vec3 *result = 0 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  result = (aoce::vec3 *)& ((arg1)->vignetteColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignetteParamet_vignetteStart_set(void * jarg1, float jarg2) {
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vignetteStart = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VignetteParamet_vignetteStart_get(void * jarg1) {
  float jresult ;
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  float result;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  result = (float) ((arg1)->vignetteStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VignetteParamet_vignetteEnd_set(void * jarg1, float jarg2) {
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vignetteEnd = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VignetteParamet_vignetteEnd_get(void * jarg1) {
  float jresult ;
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  float result;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  result = (float) ((arg1)->vignetteEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VignetteParamet() {
  void * jresult ;
  aoce::VignetteParamet *result = 0 ;
  
  result = (aoce::VignetteParamet *)new aoce::VignetteParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VignetteParamet(void * jarg1) {
  aoce::VignetteParamet *arg1 = (aoce::VignetteParamet *) 0 ;
  
  arg1 = (aoce::VignetteParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WhiteBalanceParamet_temperature_set(void * jarg1, float jarg2) {
  aoce::WhiteBalanceParamet *arg1 = (aoce::WhiteBalanceParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::WhiteBalanceParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_WhiteBalanceParamet_temperature_get(void * jarg1) {
  float jresult ;
  aoce::WhiteBalanceParamet *arg1 = (aoce::WhiteBalanceParamet *) 0 ;
  float result;
  
  arg1 = (aoce::WhiteBalanceParamet *)jarg1; 
  result = (float) ((arg1)->temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WhiteBalanceParamet_tint_set(void * jarg1, float jarg2) {
  aoce::WhiteBalanceParamet *arg1 = (aoce::WhiteBalanceParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::WhiteBalanceParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tint = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_WhiteBalanceParamet_tint_get(void * jarg1) {
  float jresult ;
  aoce::WhiteBalanceParamet *arg1 = (aoce::WhiteBalanceParamet *) 0 ;
  float result;
  
  arg1 = (aoce::WhiteBalanceParamet *)jarg1; 
  result = (float) ((arg1)->tint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WhiteBalanceParamet() {
  void * jresult ;
  aoce::WhiteBalanceParamet *result = 0 ;
  
  result = (aoce::WhiteBalanceParamet *)new aoce::WhiteBalanceParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WhiteBalanceParamet(void * jarg1) {
  aoce::WhiteBalanceParamet *arg1 = (aoce::WhiteBalanceParamet *) 0 ;
  
  arg1 = (aoce::WhiteBalanceParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoomBlurParamet_blurCenter_set(void * jarg1, void * jarg2) {
  aoce::ZoomBlurParamet *arg1 = (aoce::ZoomBlurParamet *) 0 ;
  aoce::vec2 *arg2 = (aoce::vec2 *) 0 ;
  
  arg1 = (aoce::ZoomBlurParamet *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2; 
  if (arg1) (arg1)->blurCenter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoomBlurParamet_blurCenter_get(void * jarg1) {
  void * jresult ;
  aoce::ZoomBlurParamet *arg1 = (aoce::ZoomBlurParamet *) 0 ;
  aoce::vec2 *result = 0 ;
  
  arg1 = (aoce::ZoomBlurParamet *)jarg1; 
  result = (aoce::vec2 *)& ((arg1)->blurCenter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoomBlurParamet_blurSize_set(void * jarg1, float jarg2) {
  aoce::ZoomBlurParamet *arg1 = (aoce::ZoomBlurParamet *) 0 ;
  float arg2 ;
  
  arg1 = (aoce::ZoomBlurParamet *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->blurSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoomBlurParamet_blurSize_get(void * jarg1) {
  float jresult ;
  aoce::ZoomBlurParamet *arg1 = (aoce::ZoomBlurParamet *) 0 ;
  float result;
  
  arg1 = (aoce::ZoomBlurParamet *)jarg1; 
  result = (float) ((arg1)->blurSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoomBlurParamet() {
  void * jresult ;
  aoce::ZoomBlurParamet *result = 0 ;
  
  result = (aoce::ZoomBlurParamet *)new aoce::ZoomBlurParamet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoomBlurParamet(void * jarg1) {
  aoce::ZoomBlurParamet *arg1 = (aoce::ZoomBlurParamet *) 0 ;
  
  arg1 = (aoce::ZoomBlurParamet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILookupLayer(void * jarg1) {
  aoce::ILookupLayer *arg1 = (aoce::ILookupLayer *) 0 ;
  
  arg1 = (aoce::ILookupLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILookupLayer_loadLookUp(void * jarg1, void * jarg2, int jarg3) {
  aoce::ILookupLayer *arg1 = (aoce::ILookupLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ILookupLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->loadLookUp(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILookupLayer_getLookUpInputLayer(void * jarg1) {
  void * jresult ;
  aoce::ILookupLayer *arg1 = (aoce::ILookupLayer *) 0 ;
  aoce::IInputLayer *result = 0 ;
  
  arg1 = (aoce::ILookupLayer *)jarg1; 
  result = (aoce::IInputLayer *)(arg1)->getLookUpInputLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISoftEleganceLayer(void * jarg1) {
  aoce::ISoftEleganceLayer *arg1 = (aoce::ISoftEleganceLayer *) 0 ;
  
  arg1 = (aoce::ISoftEleganceLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISoftEleganceLayer_loadLookUp1(void * jarg1, void * jarg2, int jarg3) {
  aoce::ISoftEleganceLayer *arg1 = (aoce::ISoftEleganceLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ISoftEleganceLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->loadLookUp1(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISoftEleganceLayer_loadLookUp2(void * jarg1, void * jarg2, int jarg3) {
  aoce::ISoftEleganceLayer *arg1 = (aoce::ISoftEleganceLayer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  
  arg1 = (aoce::ISoftEleganceLayer *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->loadLookUp2(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISoftEleganceLayer_getLookUpInputLayer1(void * jarg1) {
  void * jresult ;
  aoce::ISoftEleganceLayer *arg1 = (aoce::ISoftEleganceLayer *) 0 ;
  aoce::IInputLayer *result = 0 ;
  
  arg1 = (aoce::ISoftEleganceLayer *)jarg1; 
  result = (aoce::IInputLayer *)(arg1)->getLookUpInputLayer1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISoftEleganceLayer_getLookUpInputLayer2(void * jarg1) {
  void * jresult ;
  aoce::ISoftEleganceLayer *arg1 = (aoce::ISoftEleganceLayer *) 0 ;
  aoce::IInputLayer *result = 0 ;
  
  arg1 = (aoce::ISoftEleganceLayer *)jarg1; 
  result = (aoce::IInputLayer *)(arg1)->getLookUpInputLayer2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHSBLayer(void * jarg1) {
  aoce::IHSBLayer *arg1 = (aoce::IHSBLayer *) 0 ;
  
  arg1 = (aoce::IHSBLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHSBLayer_reset(void * jarg1) {
  aoce::IHSBLayer *arg1 = (aoce::IHSBLayer *) 0 ;
  
  arg1 = (aoce::IHSBLayer *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHSBLayer_rotateHue(void * jarg1, float jarg2) {
  aoce::IHSBLayer *arg1 = (aoce::IHSBLayer *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (aoce::IHSBLayer *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->rotateHue((float const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHSBLayer_adjustSaturation(void * jarg1, float jarg2) {
  aoce::IHSBLayer *arg1 = (aoce::IHSBLayer *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (aoce::IHSBLayer *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->adjustSaturation((float const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHSBLayer_adjustBrightness(void * jarg1, float jarg2) {
  aoce::IHSBLayer *arg1 = (aoce::IHSBLayer *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (aoce::IHSBLayer *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->adjustBrightness((float const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMotionDetectorObserver(void * jarg1) {
  aoce::IMotionDetectorObserver *arg1 = (aoce::IMotionDetectorObserver *) 0 ;
  
  arg1 = (aoce::IMotionDetectorObserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMotionDetectorObserver_onMotion(void * jarg1, void * jarg2) {
  aoce::IMotionDetectorObserver *arg1 = (aoce::IMotionDetectorObserver *) 0 ;
  aoce::vec4 *arg2 = 0 ;
  
  arg1 = (aoce::IMotionDetectorObserver *)jarg1; 
  arg2 = (aoce::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec4 const & type is null", 0);
    return ;
  } 
  (arg1)->onMotion((aoce::vec4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IMotionDetectorObserver() {
  void * jresult ;
  aoce::IMotionDetectorObserver *result = 0 ;
  
  result = (aoce::IMotionDetectorObserver *)new SwigDirector_IMotionDetectorObserver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMotionDetectorObserver_director_connect(void *objarg, SwigDirector_IMotionDetectorObserver::SWIG_Callback0_t callback0) {
  aoce::IMotionDetectorObserver *obj = (aoce::IMotionDetectorObserver *)objarg;
  SwigDirector_IMotionDetectorObserver *director = static_cast<SwigDirector_IMotionDetectorObserver *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMotionDetectorLayer(void * jarg1) {
  aoce::IMotionDetectorLayer *arg1 = (aoce::IMotionDetectorLayer *) 0 ;
  
  arg1 = (aoce::IMotionDetectorLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMotionDetectorLayer_setObserver(void * jarg1, void * jarg2) {
  aoce::IMotionDetectorLayer *arg1 = (aoce::IMotionDetectorLayer *) 0 ;
  aoce::IMotionDetectorObserver *arg2 = (aoce::IMotionDetectorObserver *) 0 ;
  
  arg1 = (aoce::IMotionDetectorLayer *)jarg1; 
  arg2 = (aoce::IMotionDetectorObserver *)jarg2; 
  (arg1)->setObserver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPerlinNoiseLayer(void * jarg1) {
  aoce::IPerlinNoiseLayer *arg1 = (aoce::IPerlinNoiseLayer *) 0 ;
  
  arg1 = (aoce::IPerlinNoiseLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPerlinNoiseLayer_setImageSize(void * jarg1, int jarg2, int jarg3) {
  aoce::IPerlinNoiseLayer *arg1 = (aoce::IPerlinNoiseLayer *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  
  arg1 = (aoce::IPerlinNoiseLayer *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->setImageSize(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBrightnessLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createBrightnessLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createExposureLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createExposureLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createContrastLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createContrastLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSaturationLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createSaturationLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createGammaLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createGammaLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSolarizeLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createSolarizeLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLevelsLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::LevelsParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::LevelsParamet > *)aoce::createLevelsLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorMatrixLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ColorMatrixParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ColorMatrixParamet > *)aoce::createColorMatrixLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createRGBLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::vec3 > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::vec3 > *)aoce::createRGBLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHueLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createHueLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createVibranceLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createVibranceLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBalanceLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::WhiteBalanceParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::WhiteBalanceParamet > *)aoce::createBalanceLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHighlightShadowLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::HighlightShadowParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::HighlightShadowParamet > *)aoce::createHighlightShadowLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHighlightShadowTintLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::HighlightShadowTintParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *)aoce::createHighlightShadowTintLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLookupLayer() {
  void * jresult ;
  aoce::ILookupLayer *result = 0 ;
  
  result = (aoce::ILookupLayer *)aoce::createLookupLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSoftEleganceLayer() {
  void * jresult ;
  aoce::ISoftEleganceLayer *result = 0 ;
  
  result = (aoce::ISoftEleganceLayer *)aoce::createSoftEleganceLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSkinToneLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SkinToneParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SkinToneParamet > *)aoce::createSkinToneLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorInvertLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createColorInvertLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLuminanceLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createLuminanceLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMonochromeLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::MonochromeParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::MonochromeParamet > *)aoce::createMonochromeLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createFalseColorLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::FalseColorParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::FalseColorParamet > *)aoce::createFalseColorLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHazeLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::HazeParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::HazeParamet > *)aoce::createHazeLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSepiaLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createSepiaLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createOpacityLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createOpacityLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLuminanceThresholdLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createLuminanceThresholdLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAdaptiveThresholdLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::AdaptiveThresholdParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *)aoce::createAdaptiveThresholdLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAverageLuminanceThresholdLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createAverageLuminanceThresholdLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHistogramLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 = (bool) true ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::IBaseLayer *)aoce::createHistogramLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createChromaKeyLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ChromaKeyParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ChromaKeyParamet > *)aoce::createChromaKeyLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHSBLayer() {
  void * jresult ;
  aoce::IHSBLayer *result = 0 ;
  
  result = (aoce::IHSBLayer *)aoce::createHSBLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createCropLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::CropParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::CropParamet > *)aoce::createCropLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSharpenLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SharpenParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SharpenParamet > *)aoce::createSharpenLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createUnsharpMaskLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::UnsharpMaskParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::UnsharpMaskParamet > *)aoce::createUnsharpMaskLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createGaussianBlurLayer(int jarg1) {
  void * jresult ;
  aoce::ImageType arg1 = (aoce::ImageType) aoce::ImageType::rgba8 ;
  aoce::ITLayer< aoce::GaussianBlurParamet > *result = 0 ;
  
  arg1 = (aoce::ImageType)jarg1; 
  result = (aoce::ITLayer< aoce::GaussianBlurParamet > *)aoce::createGaussianBlurLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBoxFilterLayer(int jarg1) {
  void * jresult ;
  aoce::ImageType arg1 = (aoce::ImageType) aoce::ImageType::rgba8 ;
  aoce::ITLayer< aoce::KernelSizeParamet > *result = 0 ;
  
  arg1 = (aoce::ImageType)jarg1; 
  result = (aoce::ITLayer< aoce::KernelSizeParamet > *)aoce::createBoxFilterLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBlurSelectiveLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::BlurSelectiveParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::BlurSelectiveParamet > *)aoce::createBlurSelectiveLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBlurPositionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::BlurPositionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::BlurPositionParamet > *)aoce::createBlurPositionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createIOSBlurLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::IOSBlurParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::IOSBlurParamet > *)aoce::createIOSBlurLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMedianLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 = (bool) true ;
  aoce::ITLayer< uint32_t > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::ITLayer< uint32_t > *)aoce::createMedianLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMedianK3Layer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 = (bool) true ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::IBaseLayer *)aoce::createMedianK3Layer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBilateralLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::BilateralParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::BilateralParamet > *)aoce::createBilateralLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createTiltShiftLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::TiltShiftParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::TiltShiftParamet > *)aoce::createTiltShiftLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_create3x3ConvolutionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::Mat3x3 > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::Mat3x3 > *)aoce::create3x3ConvolutionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSobelEdgeDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createSobelEdgeDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPrewittEdgeDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createPrewittEdgeDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createThresholdEdgeDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ThresholdSobelParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ThresholdSobelParamet > *)aoce::createThresholdEdgeDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createCannyEdgeDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *)aoce::createCannyEdgeDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHarrisCornerDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *)aoce::createHarrisCornerDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createNobleCornerDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::NobleCornerDetectionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *)aoce::createNobleCornerDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createShiTomasiFeatureDetectionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::NobleCornerDetectionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *)aoce::createShiTomasiFeatureDetectionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColourFASTFeatureDetector() {
  void * jresult ;
  aoce::ITLayer< aoce::FASTFeatureParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::FASTFeatureParamet > *)aoce::createColourFASTFeatureDetector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createDilationLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  aoce::ITLayer< int32_t > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::ITLayer< int32_t > *)aoce::createDilationLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createErosionLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  aoce::ITLayer< int32_t > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::ITLayer< int32_t > *)aoce::createErosionLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createClosingLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  aoce::ITLayer< int32_t > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::ITLayer< int32_t > *)aoce::createClosingLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createOpeningLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  aoce::ITLayer< int32_t > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::ITLayer< int32_t > *)aoce::createOpeningLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorLBPLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createColorLBPLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLowPassLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createLowPassLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHighPassLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createHighPassLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMotionDetectorLayer() {
  void * jresult ;
  aoce::IMotionDetectorLayer *result = 0 ;
  
  result = (aoce::IMotionDetectorLayer *)aoce::createMotionDetectorLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMotionBlurLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::MotionBlurParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::MotionBlurParamet > *)aoce::createMotionBlurLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createZoomBlurLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ZoomBlurParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ZoomBlurParamet > *)aoce::createZoomBlurLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createGuidedLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::GuidedParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::GuidedParamet > *)aoce::createGuidedLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLaplacianLayer(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  aoce::IBaseLayer *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (aoce::IBaseLayer *)aoce::createLaplacianLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createDissolveBlendLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createDissolveBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMultiplyBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createMultiplyBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAddBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createAddBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSubtractBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createSubtractBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createDivideBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createDivideBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createOverlayBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createOverlayBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createDarkenBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createDarkenBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLightenBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createLightenBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorBurnBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createColorBurnBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorDodgeBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createColorDodgeBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createScreenBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createScreenBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createExclusionBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createExclusionBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createDifferenceBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createDifferenceBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHardLightBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createHardLightBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSoftLightBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createSoftLightBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAlphaBlendLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createAlphaBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSourceOverBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createSourceOverBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createNormalBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createNormalBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createColorBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createColorBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHueBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createHueBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSaturationBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createSaturationBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLuminosityBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createLuminosityBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createLinearBurnBlendLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createLinearBurnBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPoissonBlendLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::PoissonParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::PoissonParamet > *)aoce::createPoissonBlendLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createMaskLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createMaskLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPixellateLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::PixellateParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::PixellateParamet > *)aoce::createPixellateLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPolarPixellateLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::PolarPixellateParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::PolarPixellateParamet > *)aoce::createPolarPixellateLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPixellatePositionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SelectiveParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SelectiveParamet > *)aoce::createPixellatePositionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPolkaDotLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::PolkaDotParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::PolkaDotParamet > *)aoce::createPolkaDotLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createHalftoneLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::PixellateParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::PixellateParamet > *)aoce::createHalftoneLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createCrosshatchLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::CrosshatchParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::CrosshatchParamet > *)aoce::createCrosshatchLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSketchLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createSketchLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createThresholdSketchLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ThresholdSobelParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ThresholdSobelParamet > *)aoce::createThresholdSketchLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createToonLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::ToonParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::ToonParamet > *)aoce::createToonLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSmoothToonLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SmoothToonParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SmoothToonParamet > *)aoce::createSmoothToonLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createEmbossLayer() {
  void * jresult ;
  aoce::ITLayer< float > *result = 0 ;
  
  result = (aoce::ITLayer< float > *)aoce::createEmbossLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPosterizeLayer() {
  void * jresult ;
  aoce::ITLayer< uint32_t > *result = 0 ;
  
  result = (aoce::ITLayer< uint32_t > *)aoce::createPosterizeLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSwirlLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SwirlParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SwirlParamet > *)aoce::createSwirlLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createBulgeDistortionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::DistortionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::DistortionParamet > *)aoce::createBulgeDistortionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPinchDistortionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::DistortionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::DistortionParamet > *)aoce::createPinchDistortionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createStretchDistortionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::vec2 > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::vec2 > *)aoce::createStretchDistortionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSphereRefractionLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SphereRefractionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SphereRefractionParamet > *)aoce::createSphereRefractionLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createGlassSphereLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::SphereRefractionParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::SphereRefractionParamet > *)aoce::createGlassSphereLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createVignetteLayer() {
  void * jresult ;
  aoce::ITLayer< aoce::VignetteParamet > *result = 0 ;
  
  result = (aoce::ITLayer< aoce::VignetteParamet > *)aoce::createVignetteLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createKuwaharaLayer() {
  void * jresult ;
  aoce::ITLayer< uint32_t > *result = 0 ;
  
  result = (aoce::ITLayer< uint32_t > *)aoce::createKuwaharaLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createPerlinNoiseLayer() {
  void * jresult ;
  aoce::IPerlinNoiseLayer *result = 0 ;
  
  result = (aoce::IPerlinNoiseLayer *)aoce::createPerlinNoiseLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createCGAColorspaceLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createCGAColorspaceLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createVoronoiConsumerLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createVoronoiConsumerLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createSizeScaleLayer(int jarg1) {
  void * jresult ;
  aoce::ImageType arg1 = (aoce::ImageType) aoce::ImageType::rgba8 ;
  aoce::ITLayer< aoce::SizeScaleParamet > *result = 0 ;
  
  arg1 = (aoce::ImageType)jarg1; 
  result = (aoce::ITLayer< aoce::SizeScaleParamet > *)aoce::createSizeScaleLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createResizeLayer(int jarg1) {
  void * jresult ;
  aoce::ImageType arg1 = (aoce::ImageType) aoce::ImageType::rgba8 ;
  aoce::ITLayer< aoce::ReSizeParamet > *result = 0 ;
  
  arg1 = (aoce::ImageType)jarg1; 
  result = (aoce::ITLayer< aoce::ReSizeParamet > *)aoce::createResizeLayer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAlphaShowLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createAlphaShowLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createAlphaShow2Layer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createAlphaShow2Layer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_createConvertImageLayer() {
  void * jresult ;
  aoce::IBaseLayer *result = 0 ;
  
  result = (aoce::IBaseLayer *)aoce::createConvertImageLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IStretchDistortionLayer(void * jarg1) {
  aoce::ITLayer< aoce::vec2 > *arg1 = (aoce::ITLayer< aoce::vec2 > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::vec2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IStretchDistortionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::vec2 > *arg1 = (aoce::ITLayer< aoce::vec2 > *) 0 ;
  aoce::vec2 *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::vec2 > *)jarg1; 
  arg2 = (aoce::vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::vec2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IStretchDistortionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::vec2 > *arg1 = (aoce::ITLayer< aoce::vec2 > *) 0 ;
  aoce::vec2 result;
  
  arg1 = (aoce::ITLayer< aoce::vec2 > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::vec2((const aoce::vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRGBLayer(void * jarg1) {
  aoce::ITLayer< aoce::vec3 > *arg1 = (aoce::ITLayer< aoce::vec3 > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::vec3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRGBLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::vec3 > *arg1 = (aoce::ITLayer< aoce::vec3 > *) 0 ;
  aoce::vec3 *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::vec3 > *)jarg1; 
  arg2 = (aoce::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::vec3 const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::vec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRGBLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::vec3 > *arg1 = (aoce::ITLayer< aoce::vec3 > *) 0 ;
  aoce::vec3 result;
  
  arg1 = (aoce::ITLayer< aoce::vec3 > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::vec3((const aoce::vec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMedianLayer(void * jarg1) {
  aoce::ITLayer< uint32_t > *arg1 = (aoce::ITLayer< uint32_t > *) 0 ;
  
  arg1 = (aoce::ITLayer< uint32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMedianLayer_updateParamet(void * jarg1, unsigned int jarg2) {
  aoce::ITLayer< uint32_t > *arg1 = (aoce::ITLayer< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (aoce::ITLayer< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateParamet((unsigned int const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMedianLayer_getParamet(void * jarg1) {
  unsigned int jresult ;
  aoce::ITLayer< uint32_t > *arg1 = (aoce::ITLayer< uint32_t > *) 0 ;
  unsigned int result;
  
  arg1 = (aoce::ITLayer< uint32_t > *)jarg1; 
  result = (unsigned int)(arg1)->getParamet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_I3x3ConvolutionLayer(void * jarg1) {
  aoce::ITLayer< aoce::Mat3x3 > *arg1 = (aoce::ITLayer< aoce::Mat3x3 > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::Mat3x3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_I3x3ConvolutionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::Mat3x3 > *arg1 = (aoce::ITLayer< aoce::Mat3x3 > *) 0 ;
  aoce::Mat3x3 *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::Mat3x3 > *)jarg1; 
  arg2 = (aoce::Mat3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::Mat3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::Mat3x3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_I3x3ConvolutionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::Mat3x3 > *arg1 = (aoce::ITLayer< aoce::Mat3x3 > *) 0 ;
  aoce::Mat3x3 result;
  
  arg1 = (aoce::ITLayer< aoce::Mat3x3 > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::Mat3x3((const aoce::Mat3x3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMorphLayer(void * jarg1) {
  aoce::ITLayer< int32_t > *arg1 = (aoce::ITLayer< int32_t > *) 0 ;
  
  arg1 = (aoce::ITLayer< int32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMorphLayer_updateParamet(void * jarg1, int jarg2) {
  aoce::ITLayer< int32_t > *arg1 = (aoce::ITLayer< int32_t > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (aoce::ITLayer< int32_t > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->updateParamet((int const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMorphLayer_getParamet(void * jarg1) {
  int jresult ;
  aoce::ITLayer< int32_t > *arg1 = (aoce::ITLayer< int32_t > *) 0 ;
  int result;
  
  arg1 = (aoce::ITLayer< int32_t > *)jarg1; 
  result = (int)(arg1)->getParamet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISizeScaleLayer(void * jarg1) {
  aoce::ITLayer< aoce::SizeScaleParamet > *arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISizeScaleLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SizeScaleParamet > *arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *) 0 ;
  aoce::SizeScaleParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *)jarg1; 
  arg2 = (aoce::SizeScaleParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SizeScaleParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SizeScaleParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISizeScaleLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SizeScaleParamet > *arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *) 0 ;
  aoce::SizeScaleParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SizeScaleParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SizeScaleParamet((const aoce::SizeScaleParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKernelSizeLayer(void * jarg1) {
  aoce::ITLayer< aoce::KernelSizeParamet > *arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKernelSizeLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::KernelSizeParamet > *arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *) 0 ;
  aoce::KernelSizeParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *)jarg1; 
  arg2 = (aoce::KernelSizeParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::KernelSizeParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::KernelSizeParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKernelSizeLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::KernelSizeParamet > *arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *) 0 ;
  aoce::KernelSizeParamet result;
  
  arg1 = (aoce::ITLayer< aoce::KernelSizeParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::KernelSizeParamet((const aoce::KernelSizeParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IGaussianBlurLayer(void * jarg1) {
  aoce::ITLayer< aoce::GaussianBlurParamet > *arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGaussianBlurLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::GaussianBlurParamet > *arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *) 0 ;
  aoce::GaussianBlurParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *)jarg1; 
  arg2 = (aoce::GaussianBlurParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::GaussianBlurParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::GaussianBlurParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGaussianBlurLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::GaussianBlurParamet > *arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *) 0 ;
  aoce::GaussianBlurParamet result;
  
  arg1 = (aoce::ITLayer< aoce::GaussianBlurParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::GaussianBlurParamet((const aoce::GaussianBlurParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IChromaKeyLayer(void * jarg1) {
  aoce::ITLayer< aoce::ChromaKeyParamet > *arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IChromaKeyLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ChromaKeyParamet > *arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *) 0 ;
  aoce::ChromaKeyParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *)jarg1; 
  arg2 = (aoce::ChromaKeyParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ChromaKeyParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ChromaKeyParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IChromaKeyLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ChromaKeyParamet > *arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *) 0 ;
  aoce::ChromaKeyParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ChromaKeyParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ChromaKeyParamet((const aoce::ChromaKeyParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAdaptiveThresholdLayer(void * jarg1) {
  aoce::ITLayer< aoce::AdaptiveThresholdParamet > *arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAdaptiveThresholdLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::AdaptiveThresholdParamet > *arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *) 0 ;
  aoce::AdaptiveThresholdParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *)jarg1; 
  arg2 = (aoce::AdaptiveThresholdParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::AdaptiveThresholdParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::AdaptiveThresholdParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAdaptiveThresholdLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::AdaptiveThresholdParamet > *arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *) 0 ;
  aoce::AdaptiveThresholdParamet result;
  
  arg1 = (aoce::ITLayer< aoce::AdaptiveThresholdParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::AdaptiveThresholdParamet((const aoce::AdaptiveThresholdParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IGuidedLayer(void * jarg1) {
  aoce::ITLayer< aoce::GuidedParamet > *arg1 = (aoce::ITLayer< aoce::GuidedParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::GuidedParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGuidedLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::GuidedParamet > *arg1 = (aoce::ITLayer< aoce::GuidedParamet > *) 0 ;
  aoce::GuidedParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::GuidedParamet > *)jarg1; 
  arg2 = (aoce::GuidedParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::GuidedParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::GuidedParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGuidedLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::GuidedParamet > *arg1 = (aoce::ITLayer< aoce::GuidedParamet > *) 0 ;
  aoce::GuidedParamet result;
  
  arg1 = (aoce::ITLayer< aoce::GuidedParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::GuidedParamet((const aoce::GuidedParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHarrisCornerDetectionLayer(void * jarg1) {
  aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHarrisCornerDetectionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *) 0 ;
  aoce::HarrisCornerDetectionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *)jarg1; 
  arg2 = (aoce::HarrisCornerDetectionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::HarrisCornerDetectionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::HarrisCornerDetectionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHarrisCornerDetectionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *) 0 ;
  aoce::HarrisCornerDetectionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::HarrisCornerDetectionParamet((const aoce::HarrisCornerDetectionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INobleCornerDetectionLayer(void * jarg1) {
  aoce::ITLayer< aoce::NobleCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INobleCornerDetectionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::NobleCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *) 0 ;
  aoce::NobleCornerDetectionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *)jarg1; 
  arg2 = (aoce::NobleCornerDetectionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::NobleCornerDetectionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::NobleCornerDetectionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_INobleCornerDetectionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::NobleCornerDetectionParamet > *arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *) 0 ;
  aoce::NobleCornerDetectionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::NobleCornerDetectionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::NobleCornerDetectionParamet((const aoce::NobleCornerDetectionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICannyEdgeDetectionLayer(void * jarg1) {
  aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICannyEdgeDetectionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *) 0 ;
  aoce::CannyEdgeDetectionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *)jarg1; 
  arg2 = (aoce::CannyEdgeDetectionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::CannyEdgeDetectionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::CannyEdgeDetectionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICannyEdgeDetectionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *) 0 ;
  aoce::CannyEdgeDetectionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::CannyEdgeDetectionParamet((const aoce::CannyEdgeDetectionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFASTFeatureLayer(void * jarg1) {
  aoce::ITLayer< aoce::FASTFeatureParamet > *arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFASTFeatureLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::FASTFeatureParamet > *arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *) 0 ;
  aoce::FASTFeatureParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *)jarg1; 
  arg2 = (aoce::FASTFeatureParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::FASTFeatureParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::FASTFeatureParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFASTFeatureLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::FASTFeatureParamet > *arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *) 0 ;
  aoce::FASTFeatureParamet result;
  
  arg1 = (aoce::ITLayer< aoce::FASTFeatureParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::FASTFeatureParamet((const aoce::FASTFeatureParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBilateralLayer(void * jarg1) {
  aoce::ITLayer< aoce::BilateralParamet > *arg1 = (aoce::ITLayer< aoce::BilateralParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BilateralParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBilateralLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::BilateralParamet > *arg1 = (aoce::ITLayer< aoce::BilateralParamet > *) 0 ;
  aoce::BilateralParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BilateralParamet > *)jarg1; 
  arg2 = (aoce::BilateralParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::BilateralParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::BilateralParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBilateralLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::BilateralParamet > *arg1 = (aoce::ITLayer< aoce::BilateralParamet > *) 0 ;
  aoce::BilateralParamet result;
  
  arg1 = (aoce::ITLayer< aoce::BilateralParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::BilateralParamet((const aoce::BilateralParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDistortionLayer(void * jarg1) {
  aoce::ITLayer< aoce::DistortionParamet > *arg1 = (aoce::ITLayer< aoce::DistortionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::DistortionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDistortionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::DistortionParamet > *arg1 = (aoce::ITLayer< aoce::DistortionParamet > *) 0 ;
  aoce::DistortionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::DistortionParamet > *)jarg1; 
  arg2 = (aoce::DistortionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::DistortionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::DistortionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDistortionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::DistortionParamet > *arg1 = (aoce::ITLayer< aoce::DistortionParamet > *) 0 ;
  aoce::DistortionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::DistortionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::DistortionParamet((const aoce::DistortionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPositionLayer(void * jarg1) {
  aoce::ITLayer< aoce::PositionParamet > *arg1 = (aoce::ITLayer< aoce::PositionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PositionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPositionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PositionParamet > *arg1 = (aoce::ITLayer< aoce::PositionParamet > *) 0 ;
  aoce::PositionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PositionParamet > *)jarg1; 
  arg2 = (aoce::PositionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PositionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PositionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPositionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PositionParamet > *arg1 = (aoce::ITLayer< aoce::PositionParamet > *) 0 ;
  aoce::PositionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PositionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PositionParamet((const aoce::PositionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISelectiveLayer(void * jarg1) {
  aoce::ITLayer< aoce::SelectiveParamet > *arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISelectiveLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SelectiveParamet > *arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *) 0 ;
  aoce::SelectiveParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *)jarg1; 
  arg2 = (aoce::SelectiveParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SelectiveParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SelectiveParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISelectiveLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SelectiveParamet > *arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *) 0 ;
  aoce::SelectiveParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SelectiveParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SelectiveParamet((const aoce::SelectiveParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBlurPositionLayer(void * jarg1) {
  aoce::ITLayer< aoce::BlurPositionParamet > *arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBlurPositionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::BlurPositionParamet > *arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *) 0 ;
  aoce::BlurPositionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *)jarg1; 
  arg2 = (aoce::BlurPositionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::BlurPositionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::BlurPositionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBlurPositionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::BlurPositionParamet > *arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *) 0 ;
  aoce::BlurPositionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::BlurPositionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::BlurPositionParamet((const aoce::BlurPositionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBlurSelectiveLayer(void * jarg1) {
  aoce::ITLayer< aoce::BlurSelectiveParamet > *arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBlurSelectiveLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::BlurSelectiveParamet > *arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *) 0 ;
  aoce::BlurSelectiveParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *)jarg1; 
  arg2 = (aoce::BlurSelectiveParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::BlurSelectiveParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::BlurSelectiveParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBlurSelectiveLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::BlurSelectiveParamet > *arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *) 0 ;
  aoce::BlurSelectiveParamet result;
  
  arg1 = (aoce::ITLayer< aoce::BlurSelectiveParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::BlurSelectiveParamet((const aoce::BlurSelectiveParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISphereRefractionLayer(void * jarg1) {
  aoce::ITLayer< aoce::SphereRefractionParamet > *arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISphereRefractionLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SphereRefractionParamet > *arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *) 0 ;
  aoce::SphereRefractionParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *)jarg1; 
  arg2 = (aoce::SphereRefractionParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SphereRefractionParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SphereRefractionParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISphereRefractionLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SphereRefractionParamet > *arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *) 0 ;
  aoce::SphereRefractionParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SphereRefractionParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SphereRefractionParamet((const aoce::SphereRefractionParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPixellateLayer(void * jarg1) {
  aoce::ITLayer< aoce::PixellateParamet > *arg1 = (aoce::ITLayer< aoce::PixellateParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PixellateParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPixellateLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PixellateParamet > *arg1 = (aoce::ITLayer< aoce::PixellateParamet > *) 0 ;
  aoce::PixellateParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PixellateParamet > *)jarg1; 
  arg2 = (aoce::PixellateParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PixellateParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PixellateParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPixellateLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PixellateParamet > *arg1 = (aoce::ITLayer< aoce::PixellateParamet > *) 0 ;
  aoce::PixellateParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PixellateParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PixellateParamet((const aoce::PixellateParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IColorMatrixLayer(void * jarg1) {
  aoce::ITLayer< aoce::ColorMatrixParamet > *arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IColorMatrixLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ColorMatrixParamet > *arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *) 0 ;
  aoce::ColorMatrixParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *)jarg1; 
  arg2 = (aoce::ColorMatrixParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ColorMatrixParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ColorMatrixParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IColorMatrixLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ColorMatrixParamet > *arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *) 0 ;
  aoce::ColorMatrixParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ColorMatrixParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ColorMatrixParamet((const aoce::ColorMatrixParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICropLayer(void * jarg1) {
  aoce::ITLayer< aoce::CropParamet > *arg1 = (aoce::ITLayer< aoce::CropParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CropParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICropLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::CropParamet > *arg1 = (aoce::ITLayer< aoce::CropParamet > *) 0 ;
  aoce::CropParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CropParamet > *)jarg1; 
  arg2 = (aoce::CropParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::CropParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::CropParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICropLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::CropParamet > *arg1 = (aoce::ITLayer< aoce::CropParamet > *) 0 ;
  aoce::CropParamet result;
  
  arg1 = (aoce::ITLayer< aoce::CropParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::CropParamet((const aoce::CropParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICrosshatchLayer(void * jarg1) {
  aoce::ITLayer< aoce::CrosshatchParamet > *arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICrosshatchLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::CrosshatchParamet > *arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *) 0 ;
  aoce::CrosshatchParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *)jarg1; 
  arg2 = (aoce::CrosshatchParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::CrosshatchParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::CrosshatchParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICrosshatchLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::CrosshatchParamet > *arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *) 0 ;
  aoce::CrosshatchParamet result;
  
  arg1 = (aoce::ITLayer< aoce::CrosshatchParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::CrosshatchParamet((const aoce::CrosshatchParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFalseColorLayer(void * jarg1) {
  aoce::ITLayer< aoce::FalseColorParamet > *arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IFalseColorLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::FalseColorParamet > *arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *) 0 ;
  aoce::FalseColorParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *)jarg1; 
  arg2 = (aoce::FalseColorParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::FalseColorParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::FalseColorParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFalseColorLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::FalseColorParamet > *arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *) 0 ;
  aoce::FalseColorParamet result;
  
  arg1 = (aoce::ITLayer< aoce::FalseColorParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::FalseColorParamet((const aoce::FalseColorParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHazeLayer(void * jarg1) {
  aoce::ITLayer< aoce::HazeParamet > *arg1 = (aoce::ITLayer< aoce::HazeParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HazeParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHazeLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::HazeParamet > *arg1 = (aoce::ITLayer< aoce::HazeParamet > *) 0 ;
  aoce::HazeParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HazeParamet > *)jarg1; 
  arg2 = (aoce::HazeParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::HazeParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::HazeParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHazeLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::HazeParamet > *arg1 = (aoce::ITLayer< aoce::HazeParamet > *) 0 ;
  aoce::HazeParamet result;
  
  arg1 = (aoce::ITLayer< aoce::HazeParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::HazeParamet((const aoce::HazeParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHighlightShadowLayer(void * jarg1) {
  aoce::ITLayer< aoce::HighlightShadowParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHighlightShadowLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::HighlightShadowParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *) 0 ;
  aoce::HighlightShadowParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *)jarg1; 
  arg2 = (aoce::HighlightShadowParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::HighlightShadowParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::HighlightShadowParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHighlightShadowLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::HighlightShadowParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *) 0 ;
  aoce::HighlightShadowParamet result;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::HighlightShadowParamet((const aoce::HighlightShadowParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IHighlightShadowTintLayer(void * jarg1) {
  aoce::ITLayer< aoce::HighlightShadowTintParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IHighlightShadowTintLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::HighlightShadowTintParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *) 0 ;
  aoce::HighlightShadowTintParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *)jarg1; 
  arg2 = (aoce::HighlightShadowTintParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::HighlightShadowTintParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::HighlightShadowTintParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IHighlightShadowTintLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::HighlightShadowTintParamet > *arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *) 0 ;
  aoce::HighlightShadowTintParamet result;
  
  arg1 = (aoce::ITLayer< aoce::HighlightShadowTintParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::HighlightShadowTintParamet((const aoce::HighlightShadowTintParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IIOSBlurLayer(void * jarg1) {
  aoce::ITLayer< aoce::IOSBlurParamet > *arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IIOSBlurLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::IOSBlurParamet > *arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *) 0 ;
  aoce::IOSBlurParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *)jarg1; 
  arg2 = (aoce::IOSBlurParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::IOSBlurParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::IOSBlurParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IIOSBlurLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::IOSBlurParamet > *arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *) 0 ;
  aoce::IOSBlurParamet result;
  
  arg1 = (aoce::ITLayer< aoce::IOSBlurParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::IOSBlurParamet((const aoce::IOSBlurParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILevelsLayer(void * jarg1) {
  aoce::ITLayer< aoce::LevelsParamet > *arg1 = (aoce::ITLayer< aoce::LevelsParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::LevelsParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILevelsLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::LevelsParamet > *arg1 = (aoce::ITLayer< aoce::LevelsParamet > *) 0 ;
  aoce::LevelsParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::LevelsParamet > *)jarg1; 
  arg2 = (aoce::LevelsParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::LevelsParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::LevelsParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILevelsLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::LevelsParamet > *arg1 = (aoce::ITLayer< aoce::LevelsParamet > *) 0 ;
  aoce::LevelsParamet result;
  
  arg1 = (aoce::ITLayer< aoce::LevelsParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::LevelsParamet((const aoce::LevelsParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMonochromeLayer(void * jarg1) {
  aoce::ITLayer< aoce::MonochromeParamet > *arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMonochromeLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::MonochromeParamet > *arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *) 0 ;
  aoce::MonochromeParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *)jarg1; 
  arg2 = (aoce::MonochromeParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::MonochromeParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::MonochromeParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMonochromeLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::MonochromeParamet > *arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *) 0 ;
  aoce::MonochromeParamet result;
  
  arg1 = (aoce::ITLayer< aoce::MonochromeParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::MonochromeParamet((const aoce::MonochromeParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMotionBlurLayer(void * jarg1) {
  aoce::ITLayer< aoce::MotionBlurParamet > *arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMotionBlurLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::MotionBlurParamet > *arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *) 0 ;
  aoce::MotionBlurParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *)jarg1; 
  arg2 = (aoce::MotionBlurParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::MotionBlurParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::MotionBlurParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMotionBlurLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::MotionBlurParamet > *arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *) 0 ;
  aoce::MotionBlurParamet result;
  
  arg1 = (aoce::ITLayer< aoce::MotionBlurParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::MotionBlurParamet((const aoce::MotionBlurParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPoissonLayer(void * jarg1) {
  aoce::ITLayer< aoce::PoissonParamet > *arg1 = (aoce::ITLayer< aoce::PoissonParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PoissonParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPoissonLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PoissonParamet > *arg1 = (aoce::ITLayer< aoce::PoissonParamet > *) 0 ;
  aoce::PoissonParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PoissonParamet > *)jarg1; 
  arg2 = (aoce::PoissonParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PoissonParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PoissonParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPoissonLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PoissonParamet > *arg1 = (aoce::ITLayer< aoce::PoissonParamet > *) 0 ;
  aoce::PoissonParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PoissonParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PoissonParamet((const aoce::PoissonParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPolarPixellateLayer(void * jarg1) {
  aoce::ITLayer< aoce::PolarPixellateParamet > *arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPolarPixellateLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PolarPixellateParamet > *arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *) 0 ;
  aoce::PolarPixellateParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *)jarg1; 
  arg2 = (aoce::PolarPixellateParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PolarPixellateParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PolarPixellateParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPolarPixellateLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PolarPixellateParamet > *arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *) 0 ;
  aoce::PolarPixellateParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PolarPixellateParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PolarPixellateParamet((const aoce::PolarPixellateParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPolkaDotLayer(void * jarg1) {
  aoce::ITLayer< aoce::PolkaDotParamet > *arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPolkaDotLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::PolkaDotParamet > *arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *) 0 ;
  aoce::PolkaDotParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *)jarg1; 
  arg2 = (aoce::PolkaDotParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::PolkaDotParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::PolkaDotParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPolkaDotLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::PolkaDotParamet > *arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *) 0 ;
  aoce::PolkaDotParamet result;
  
  arg1 = (aoce::ITLayer< aoce::PolkaDotParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::PolkaDotParamet((const aoce::PolkaDotParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISharpenLayer(void * jarg1) {
  aoce::ITLayer< aoce::SharpenParamet > *arg1 = (aoce::ITLayer< aoce::SharpenParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SharpenParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISharpenLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SharpenParamet > *arg1 = (aoce::ITLayer< aoce::SharpenParamet > *) 0 ;
  aoce::SharpenParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SharpenParamet > *)jarg1; 
  arg2 = (aoce::SharpenParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SharpenParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SharpenParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISharpenLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SharpenParamet > *arg1 = (aoce::ITLayer< aoce::SharpenParamet > *) 0 ;
  aoce::SharpenParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SharpenParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SharpenParamet((const aoce::SharpenParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISkinToneLayer(void * jarg1) {
  aoce::ITLayer< aoce::SkinToneParamet > *arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISkinToneLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SkinToneParamet > *arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *) 0 ;
  aoce::SkinToneParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *)jarg1; 
  arg2 = (aoce::SkinToneParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SkinToneParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SkinToneParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISkinToneLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SkinToneParamet > *arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *) 0 ;
  aoce::SkinToneParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SkinToneParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SkinToneParamet((const aoce::SkinToneParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IToonLayer(void * jarg1) {
  aoce::ITLayer< aoce::ToonParamet > *arg1 = (aoce::ITLayer< aoce::ToonParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ToonParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IToonLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ToonParamet > *arg1 = (aoce::ITLayer< aoce::ToonParamet > *) 0 ;
  aoce::ToonParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ToonParamet > *)jarg1; 
  arg2 = (aoce::ToonParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ToonParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ToonParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IToonLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ToonParamet > *arg1 = (aoce::ITLayer< aoce::ToonParamet > *) 0 ;
  aoce::ToonParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ToonParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ToonParamet((const aoce::ToonParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISmoothToonLayer(void * jarg1) {
  aoce::ITLayer< aoce::SmoothToonParamet > *arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISmoothToonLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SmoothToonParamet > *arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *) 0 ;
  aoce::SmoothToonParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *)jarg1; 
  arg2 = (aoce::SmoothToonParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SmoothToonParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SmoothToonParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISmoothToonLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SmoothToonParamet > *arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *) 0 ;
  aoce::SmoothToonParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SmoothToonParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SmoothToonParamet((const aoce::SmoothToonParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISwirlLayer(void * jarg1) {
  aoce::ITLayer< aoce::SwirlParamet > *arg1 = (aoce::ITLayer< aoce::SwirlParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SwirlParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISwirlLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::SwirlParamet > *arg1 = (aoce::ITLayer< aoce::SwirlParamet > *) 0 ;
  aoce::SwirlParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::SwirlParamet > *)jarg1; 
  arg2 = (aoce::SwirlParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::SwirlParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::SwirlParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISwirlLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::SwirlParamet > *arg1 = (aoce::ITLayer< aoce::SwirlParamet > *) 0 ;
  aoce::SwirlParamet result;
  
  arg1 = (aoce::ITLayer< aoce::SwirlParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::SwirlParamet((const aoce::SwirlParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IThresholdSobelLayer(void * jarg1) {
  aoce::ITLayer< aoce::ThresholdSobelParamet > *arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IThresholdSobelLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ThresholdSobelParamet > *arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *) 0 ;
  aoce::ThresholdSobelParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *)jarg1; 
  arg2 = (aoce::ThresholdSobelParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ThresholdSobelParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ThresholdSobelParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IThresholdSobelLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ThresholdSobelParamet > *arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *) 0 ;
  aoce::ThresholdSobelParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ThresholdSobelParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ThresholdSobelParamet((const aoce::ThresholdSobelParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ITiltShiftLayer(void * jarg1) {
  aoce::ITLayer< aoce::TiltShiftParamet > *arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ITiltShiftLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::TiltShiftParamet > *arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *) 0 ;
  aoce::TiltShiftParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *)jarg1; 
  arg2 = (aoce::TiltShiftParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::TiltShiftParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::TiltShiftParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ITiltShiftLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::TiltShiftParamet > *arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *) 0 ;
  aoce::TiltShiftParamet result;
  
  arg1 = (aoce::ITLayer< aoce::TiltShiftParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::TiltShiftParamet((const aoce::TiltShiftParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IUnsharpMaskLayer(void * jarg1) {
  aoce::ITLayer< aoce::UnsharpMaskParamet > *arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IUnsharpMaskLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::UnsharpMaskParamet > *arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *) 0 ;
  aoce::UnsharpMaskParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *)jarg1; 
  arg2 = (aoce::UnsharpMaskParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::UnsharpMaskParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::UnsharpMaskParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IUnsharpMaskLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::UnsharpMaskParamet > *arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *) 0 ;
  aoce::UnsharpMaskParamet result;
  
  arg1 = (aoce::ITLayer< aoce::UnsharpMaskParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::UnsharpMaskParamet((const aoce::UnsharpMaskParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVignetteLayer(void * jarg1) {
  aoce::ITLayer< aoce::VignetteParamet > *arg1 = (aoce::ITLayer< aoce::VignetteParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::VignetteParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVignetteLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::VignetteParamet > *arg1 = (aoce::ITLayer< aoce::VignetteParamet > *) 0 ;
  aoce::VignetteParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::VignetteParamet > *)jarg1; 
  arg2 = (aoce::VignetteParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::VignetteParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::VignetteParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVignetteLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::VignetteParamet > *arg1 = (aoce::ITLayer< aoce::VignetteParamet > *) 0 ;
  aoce::VignetteParamet result;
  
  arg1 = (aoce::ITLayer< aoce::VignetteParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::VignetteParamet((const aoce::VignetteParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IWhiteBalanceLayer(void * jarg1) {
  aoce::ITLayer< aoce::WhiteBalanceParamet > *arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWhiteBalanceLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::WhiteBalanceParamet > *arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *) 0 ;
  aoce::WhiteBalanceParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *)jarg1; 
  arg2 = (aoce::WhiteBalanceParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::WhiteBalanceParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::WhiteBalanceParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWhiteBalanceLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::WhiteBalanceParamet > *arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *) 0 ;
  aoce::WhiteBalanceParamet result;
  
  arg1 = (aoce::ITLayer< aoce::WhiteBalanceParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::WhiteBalanceParamet((const aoce::WhiteBalanceParamet &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IZoomBlurLayer(void * jarg1) {
  aoce::ITLayer< aoce::ZoomBlurParamet > *arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *) 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IZoomBlurLayer_updateParamet(void * jarg1, void * jarg2) {
  aoce::ITLayer< aoce::ZoomBlurParamet > *arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *) 0 ;
  aoce::ZoomBlurParamet *arg2 = 0 ;
  
  arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *)jarg1; 
  arg2 = (aoce::ZoomBlurParamet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aoce::ZoomBlurParamet const & type is null", 0);
    return ;
  } 
  (arg1)->updateParamet((aoce::ZoomBlurParamet const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IZoomBlurLayer_getParamet(void * jarg1) {
  void * jresult ;
  aoce::ITLayer< aoce::ZoomBlurParamet > *arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *) 0 ;
  aoce::ZoomBlurParamet result;
  
  arg1 = (aoce::ITLayer< aoce::ZoomBlurParamet > *)jarg1; 
  result = (arg1)->getParamet();
  jresult = new aoce::ZoomBlurParamet((const aoce::ZoomBlurParamet &)result); 
  return jresult;
}


SWIGEXPORT aoce::ILMetadata * SWIGSTDCALL CSharp_ILGroupMetadata_SWIGUpcast(aoce::ILGroupMetadata *jarg1) {
    return (aoce::ILMetadata *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_AInputLayer_SWIGUpcast(aoce::ITLayer< aoce::InputParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_AOutputLayer_SWIGUpcast(aoce::ITLayer< aoce::OutputParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ITLayer< aoce::InputParamet > * SWIGSTDCALL CSharp_IInputLayer_SWIGUpcast(aoce::IInputLayer *jarg1) {
    return (aoce::ITLayer< aoce::InputParamet > *)jarg1;
}

SWIGEXPORT aoce::ITLayer< aoce::OutputParamet > * SWIGSTDCALL CSharp_IOutputLayer_SWIGUpcast(aoce::IOutputLayer *jarg1) {
    return (aoce::ITLayer< aoce::OutputParamet > *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IYUVLayer_SWIGUpcast(aoce::ITLayer< aoce::YUVParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IMapChannelLayer_SWIGUpcast(aoce::ITLayer< aoce::MapChannelParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IFlipLayer_SWIGUpcast(aoce::ITLayer< aoce::FlipParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ITransposeLayer_SWIGUpcast(aoce::ITLayer< aoce::TransposeParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IReSizeLayer_SWIGUpcast(aoce::ITLayer< aoce::ReSizeParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IBlendLayer_SWIGUpcast(aoce::ITLayer< aoce::BlendParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILMetadata * SWIGSTDCALL CSharp_ILBoolMetadata_SWIGUpcast(aoce::ILTMetadata< bool > *jarg1) {
    return (aoce::ILMetadata *)jarg1;
}

SWIGEXPORT aoce::ILMetadata * SWIGSTDCALL CSharp_ILStringMetadata_SWIGUpcast(aoce::ILTMetadata< char const * > *jarg1) {
    return (aoce::ILMetadata *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ASoftEleganceLayer_SWIGUpcast(aoce::ITLayer< aoce::SoftEleganceParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_AFloatLayer_SWIGUpcast(aoce::ITLayer< float > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_APerlinNoiseLayer_SWIGUpcast(aoce::ITLayer< aoce::PerlinNoiseParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ILookupLayer_SWIGUpcast(aoce::ILookupLayer *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ITLayer< aoce::SoftEleganceParamet > * SWIGSTDCALL CSharp_ISoftEleganceLayer_SWIGUpcast(aoce::ISoftEleganceLayer *jarg1) {
    return (aoce::ITLayer< aoce::SoftEleganceParamet > *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IHSBLayer_SWIGUpcast(aoce::IHSBLayer *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ITLayer< float > * SWIGSTDCALL CSharp_IMotionDetectorLayer_SWIGUpcast(aoce::IMotionDetectorLayer *jarg1) {
    return (aoce::ITLayer< float > *)jarg1;
}

SWIGEXPORT aoce::ITLayer< aoce::PerlinNoiseParamet > * SWIGSTDCALL CSharp_IPerlinNoiseLayer_SWIGUpcast(aoce::IPerlinNoiseLayer *jarg1) {
    return (aoce::ITLayer< aoce::PerlinNoiseParamet > *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IStretchDistortionLayer_SWIGUpcast(aoce::ITLayer< aoce::vec2 > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IRGBLayer_SWIGUpcast(aoce::ITLayer< aoce::vec3 > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IMedianLayer_SWIGUpcast(aoce::ITLayer< uint32_t > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_I3x3ConvolutionLayer_SWIGUpcast(aoce::ITLayer< aoce::Mat3x3 > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IMorphLayer_SWIGUpcast(aoce::ITLayer< int32_t > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISizeScaleLayer_SWIGUpcast(aoce::ITLayer< aoce::SizeScaleParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IKernelSizeLayer_SWIGUpcast(aoce::ITLayer< aoce::KernelSizeParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IGaussianBlurLayer_SWIGUpcast(aoce::ITLayer< aoce::GaussianBlurParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IChromaKeyLayer_SWIGUpcast(aoce::ITLayer< aoce::ChromaKeyParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IAdaptiveThresholdLayer_SWIGUpcast(aoce::ITLayer< aoce::AdaptiveThresholdParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IGuidedLayer_SWIGUpcast(aoce::ITLayer< aoce::GuidedParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IHarrisCornerDetectionLayer_SWIGUpcast(aoce::ITLayer< aoce::HarrisCornerDetectionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_INobleCornerDetectionLayer_SWIGUpcast(aoce::ITLayer< aoce::NobleCornerDetectionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ICannyEdgeDetectionLayer_SWIGUpcast(aoce::ITLayer< aoce::CannyEdgeDetectionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IFASTFeatureLayer_SWIGUpcast(aoce::ITLayer< aoce::FASTFeatureParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IBilateralLayer_SWIGUpcast(aoce::ITLayer< aoce::BilateralParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IDistortionLayer_SWIGUpcast(aoce::ITLayer< aoce::DistortionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IPositionLayer_SWIGUpcast(aoce::ITLayer< aoce::PositionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISelectiveLayer_SWIGUpcast(aoce::ITLayer< aoce::SelectiveParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IBlurPositionLayer_SWIGUpcast(aoce::ITLayer< aoce::BlurPositionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IBlurSelectiveLayer_SWIGUpcast(aoce::ITLayer< aoce::BlurSelectiveParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISphereRefractionLayer_SWIGUpcast(aoce::ITLayer< aoce::SphereRefractionParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IPixellateLayer_SWIGUpcast(aoce::ITLayer< aoce::PixellateParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IColorMatrixLayer_SWIGUpcast(aoce::ITLayer< aoce::ColorMatrixParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ICropLayer_SWIGUpcast(aoce::ITLayer< aoce::CropParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ICrosshatchLayer_SWIGUpcast(aoce::ITLayer< aoce::CrosshatchParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IFalseColorLayer_SWIGUpcast(aoce::ITLayer< aoce::FalseColorParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IHazeLayer_SWIGUpcast(aoce::ITLayer< aoce::HazeParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IHighlightShadowLayer_SWIGUpcast(aoce::ITLayer< aoce::HighlightShadowParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IHighlightShadowTintLayer_SWIGUpcast(aoce::ITLayer< aoce::HighlightShadowTintParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IIOSBlurLayer_SWIGUpcast(aoce::ITLayer< aoce::IOSBlurParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ILevelsLayer_SWIGUpcast(aoce::ITLayer< aoce::LevelsParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IMonochromeLayer_SWIGUpcast(aoce::ITLayer< aoce::MonochromeParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IMotionBlurLayer_SWIGUpcast(aoce::ITLayer< aoce::MotionBlurParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IPoissonLayer_SWIGUpcast(aoce::ITLayer< aoce::PoissonParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IPolarPixellateLayer_SWIGUpcast(aoce::ITLayer< aoce::PolarPixellateParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IPolkaDotLayer_SWIGUpcast(aoce::ITLayer< aoce::PolkaDotParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISharpenLayer_SWIGUpcast(aoce::ITLayer< aoce::SharpenParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISkinToneLayer_SWIGUpcast(aoce::ITLayer< aoce::SkinToneParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IToonLayer_SWIGUpcast(aoce::ITLayer< aoce::ToonParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISmoothToonLayer_SWIGUpcast(aoce::ITLayer< aoce::SmoothToonParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ISwirlLayer_SWIGUpcast(aoce::ITLayer< aoce::SwirlParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IThresholdSobelLayer_SWIGUpcast(aoce::ITLayer< aoce::ThresholdSobelParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_ITiltShiftLayer_SWIGUpcast(aoce::ITLayer< aoce::TiltShiftParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IUnsharpMaskLayer_SWIGUpcast(aoce::ITLayer< aoce::UnsharpMaskParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IVignetteLayer_SWIGUpcast(aoce::ITLayer< aoce::VignetteParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IWhiteBalanceLayer_SWIGUpcast(aoce::ITLayer< aoce::WhiteBalanceParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

SWIGEXPORT aoce::ILayer * SWIGSTDCALL CSharp_IZoomBlurLayer_SWIGUpcast(aoce::ITLayer< aoce::ZoomBlurParamet > *jarg1) {
    return (aoce::ILayer *)jarg1;
}

#ifdef __cplusplus
}
#endif

