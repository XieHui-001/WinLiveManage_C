//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IOutputLayerObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IOutputLayerObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IOutputLayerObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IOutputLayerObserver() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_IOutputLayerObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void onImageProcess(global::System.IntPtr data, ImageFormat imageFormat, int outIndex) {
    AoceWrapperPINVOKE.IOutputLayerObserver_onImageProcess(swigCPtr, data, ImageFormat.getCPtr(imageFormat), outIndex);
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onFormatChanged(ImageFormat imageFormat, int outIndex) {
    if (SwigDerivedClassHasMethod("onFormatChanged", swigMethodTypes1)) AoceWrapperPINVOKE.IOutputLayerObserver_onFormatChangedSwigExplicitIOutputLayerObserver(swigCPtr, ImageFormat.getCPtr(imageFormat), outIndex); else AoceWrapperPINVOKE.IOutputLayerObserver_onFormatChanged(swigCPtr, ImageFormat.getCPtr(imageFormat), outIndex);
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public IOutputLayerObserver() : this(AoceWrapperPINVOKE.new_IOutputLayerObserver(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onImageProcess", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIOutputLayerObserver_0(SwigDirectorMethodonImageProcess);
    if (SwigDerivedClassHasMethod("onFormatChanged", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIOutputLayerObserver_1(SwigDirectorMethodonFormatChanged);
    AoceWrapperPINVOKE.IOutputLayerObserver_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IOutputLayerObserver));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodonImageProcess(global::System.IntPtr data, global::System.IntPtr imageFormat, int outIndex) {
    onImageProcess(data, new ImageFormat(imageFormat, false), outIndex);
  }

  private void SwigDirectorMethodonFormatChanged(global::System.IntPtr imageFormat, int outIndex) {
    onFormatChanged(new ImageFormat(imageFormat, false), outIndex);
  }

  public delegate void SwigDelegateIOutputLayerObserver_0(global::System.IntPtr data, global::System.IntPtr imageFormat, int outIndex);
  public delegate void SwigDelegateIOutputLayerObserver_1(global::System.IntPtr imageFormat, int outIndex);

  private SwigDelegateIOutputLayerObserver_0 swigDelegate0;
  private SwigDelegateIOutputLayerObserver_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(global::System.IntPtr), typeof(ImageFormat), typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(ImageFormat), typeof(int) };
}
