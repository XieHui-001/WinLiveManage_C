//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IAudioDeviceObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IAudioDeviceObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IAudioDeviceObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IAudioDeviceObserver() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AoceWrapperPINVOKE.delete_IAudioDeviceObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IAudioDeviceObserver() : this(AoceWrapperPINVOKE.new_IAudioDeviceObserver(), true) {
    SwigDirectorConnect();
  }

  public virtual void onDeviceHandle(VideoHandleId id, int codeId) {
    if (SwigDerivedClassHasMethod("onDeviceHandle", swigMethodTypes0)) AoceWrapperPINVOKE.IAudioDeviceObserver_onDeviceHandleSwigExplicitIAudioDeviceObserver(swigCPtr, (int)id, codeId); else AoceWrapperPINVOKE.IAudioDeviceObserver_onDeviceHandle(swigCPtr, (int)id, codeId);
  }

  public virtual void onAudioFrame(AudioFrame audioFrame) {
    if (SwigDerivedClassHasMethod("onAudioFrame", swigMethodTypes1)) AoceWrapperPINVOKE.IAudioDeviceObserver_onAudioFrameSwigExplicitIAudioDeviceObserver(swigCPtr, AudioFrame.getCPtr(audioFrame)); else AoceWrapperPINVOKE.IAudioDeviceObserver_onAudioFrame(swigCPtr, AudioFrame.getCPtr(audioFrame));
    if (AoceWrapperPINVOKE.SWIGPendingException.Pending) throw AoceWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onDeviceHandle", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIAudioDeviceObserver_0(SwigDirectorMethodonDeviceHandle);
    if (SwigDerivedClassHasMethod("onAudioFrame", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIAudioDeviceObserver_1(SwigDirectorMethodonAudioFrame);
    AoceWrapperPINVOKE.IAudioDeviceObserver_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IAudioDeviceObserver));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodonDeviceHandle(int id, int codeId) {
    onDeviceHandle((VideoHandleId)id, codeId);
  }

  private void SwigDirectorMethodonAudioFrame(global::System.IntPtr audioFrame) {
    onAudioFrame(new AudioFrame(audioFrame, false));
  }

  public delegate void SwigDelegateIAudioDeviceObserver_0(int id, int codeId);
  public delegate void SwigDelegateIAudioDeviceObserver_1(global::System.IntPtr audioFrame);

  private SwigDelegateIAudioDeviceObserver_0 swigDelegate0;
  private SwigDelegateIAudioDeviceObserver_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(VideoHandleId), typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(AudioFrame) };
}
